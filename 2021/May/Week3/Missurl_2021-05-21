{
    "threat_intelligence": {
        "url": "https://link.springer.com/article/10.1007/s10618-023-00981-1",
        "timestamp": "2021-05-21 00:00:00",
        "original_content": "Acampora G, Cosma G (2015) A fuzzy-based approach to programming language independent source-code plagiarism detection. In: 2015 IEEE international conference on fuzzy systems (FUZZ-IEEE), pp 1\u20138. \nhttps://doi.org/10.1109/FUZZ-IEEE.2015.7337935\nAlqarni M, Azim A (2022) Low level source code vulnerability detection using advanced BERT language model. \nhttps://assets.pubpub.org/bbi2k2lr/31652980468154.pdf\n. Accessed 03 Sept 2022\nAshizawa N, Yanai N, Cruz JP, Okamura S (2021) Eth2vec: learning contract-wide code representations for vulnerability detection on ethereum smart contracts. arXiv preprint \narXiv:2101.02377\nAtzei N, Bartoletti M, Cimoli T (2017) A survey of attacks on ethereum smart contracts sok. In: Proceedings of the 6th International conference on principles of security and trust, Springer, Berlin, Heidelberg, Vol. 10204, pp 164\u2013186. \nhttps://doi.org/10.1007/978-3-662-54455-6_8\nBeautifulSoup: beautiful soup documentation: beautiful soup 4.9.0 documentation. \nhttps://www.crummy.com/software/BeautifulSoup/bs4/doc/\n. Accessed 26 Jan 2022\nBodden E (2012) Inter-procedural data-flow analysis with ifds/ide and soot. In: Proceedings of the ACM SIGPLAN international workshop on state of the art in java program analysis. SOAP \u201912. Association for Computing Machinery, New York, pp 3\u20138. \nhttps://doi.org/10.1145/2259051.2259052\nBuratti L, Pujar S, Bornea M, McCarley S, Zheng Y, Rossiello G, Morari A, Laredo J, Thost V, Zhuang Y, et al (2020) Exploring software naturalness through neural language models. arXiv preprint \narXiv:2006.12641\nDevlin J, Chang MW, Lee K, Toutanova K (2018) Bert: Pre-training of deep bidirectional transformers for language understanding. arXiv preprint \narXiv:1810.04805\nDing SHH (2021) Kam1n0 Server. McGill University. \nhttps://github.com/McGill-DMaS/Kam1n0-Community\nDurieux T, Ferreira JF, Abreu R, Cruz P (2020) Empirical review of automated analysis tools on 47,587 ethereum smart contracts. In: Proceedings of the ACM/IEEE 42nd international conference on software engineering, pp 530\u2013541\nEthereum (2021) Gas and fees at ethereum development documentation. \nhttps://ethereum.org/ko/developers/docs/gas/\n. Accessed 1 Dec 2021\nFeng Z, Guo D, Tang D, Duan N, Feng X, Gong M, Shou L, Qin B, Liu T, Jiang D, et al (2020) Codebert: a pre-trained model for programming and natural languages. arXiv preprint \narXiv:2002.08155\nGitHub SD (2021) Solidity. Ethereum. \nhttps://docs.soliditylang.org/en/v0.8.4/\nGuo D, Lu S, Duan N, Wang Y, Zhou M, Yin J (2022) UniXcoder: unified cross-modal pre-training for code representation. arXiv. \nhttps://doi.org/10.48550/ARXIV.2203.03850\n. \narXiv:https://arxiv.org/abs/2203.03850\nGuo D, Ren S, Lu S, Feng Z, Tang D, LIU S, Zhou L, Duan N, Svyatkovskiy A, Fu S, Tufano M, Deng SK, Clement C, Drain D, Sundaresan N, Yin J, Jiang D, Zhou M (2021) GraphCodeBERT: pre-training code representations with data flow. In: International conference on learning representations. \nhttps://openreview.net/forum?id=jLoC4ez43PZ\nHauser B (2021) py-solc. Ethereum. \nhttps://github.com/ethereum/py-solc\nHewa T, Ylianttila M, Liyanage M (2021) Survey on blockchain based smart contracts: applications, opportunities and challenges. J Netw Comput Appl 177:102857. \nhttps://doi.org/10.1016/j.jnca.2020.102857\nArticle\n\u00a0\n    \n\n                    Google Scholar\n\u00a0\n                \nJamin S, Cheng Jin, Kurc, AR, Raz D, Shavitt Y (2020) Smart contract vulnerability detection using graph neural network. In: Proceedings of the twenty-ninth international joint conference on artificial intelligence, IJCAI 2020\nJeon S, Lee G, Kim H, Woo SS (2021) SmartConDetect: highly accurate smart contract code vulnerability detection mechanism using BERT. In: KDD workshop on programming language processing (PLP)\nJiang L, Misherghi G, Su Z, Glondu S (2007) Deckard: scalable and accurate tree-based detection of code clones. In: 29th international conference on software engineering (ICSE\u201907), IEEE, pp 96\u2013105\nKanade A, Maniatis P, Balakrishnan G, Shi K (2020) Learning and evaluating contextual embedding of source code. In: International conference on machine learning, PMLR, pp 5110\u20135121\nLu S, Guo D, Ren S, Huang J, Svyatkovskiy A, Blanco A, Clement C, Drain D, Jiang D, Tang D, et al (2021) CodeXGLUE: a machine learning benchmark dataset for code understanding and generation. arXiv preprint \narXiv:2102.04664\nLutz O, Chen H, Fereidooni H, Sendner C, Dmitrienko A, Sadeghi AR, Koushanfar F (2021) ESCORT: ethereum smart COntRacTs vulnerability detection using deep neural network and transfer learning. arXiv preprint \narXiv:2103.12607\nMomeni P, Wang Y, Samavi R (2019) Machine learning model for smart contracts security analysis. In: 2019 17th international conference on privacy, security and trust (PST), IEEE, pp 1\u20136\nPalladino S (2017) The parity wallet hack explained. OpenZeppelin blog, https://blog. openzeppelin. com/on-the-parity-wallet-multisig-hack-405a8c12e8f7\nPedregosa F, Varoquaux G, Gramfort A, Michel V, Thirion B, Grisel O, Blondel M, Prettenhofer P, Weiss R, Dubourg V, Vanderplas J, Passos A, Cournapeau D, Brucher M, Perrot M, Duchesnay E (2011) Scikit-learn: machine learning in python. J Mach Learn Res 12:2825\u20132830\nMathSciNet\n\u00a0\n    \n\n                    Google Scholar\n\u00a0\n                \nPopper N (2016) A hacking of more than \\$50 million dashes hopes in the world of virtual currency. The New York Times\nReproducibility: PyTorch 1.13 documentation. \nhttps://pytorch.org/docs/stable/notes/randomness.html\n. Accessed 24 Dec 2022\nRussell R, Kim L, Hamilton L, Lazovich T, Harer J, Ozdemir O, Ellingwood P, McConley M (2018) Automated vulnerability detection in source code using deep representation learning. In: 2018 17th IEEE international conference on machine learning and applications (ICMLA), pp 757\u2013762. \nhttps://doi.org/10.1109/ICMLA.2018.00120\nSafeMath (2017) \nhttps://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\nSamreen NF, Alalfi MH (2021) A survey of security vulnerabilities in ethereum smart contracts. arXiv preprint \narXiv:2105.06974\nSolidity v0.5.0 Breaking Changes (2016) \nhttps://docs.soliditylang.org/en/latest/050-breaking-changes.html#\nSwathi B, Anju R (2019) Reformulation of natural language queries on source code base using NLP techniques. Compusoft 8(2):3047\u20133052\n\n                    Google Scholar\n\u00a0\n                \nSzabo N (1997) Formalizing and securing relationships on public networks. First Monday\nTeam TE (2021) Ethereum (ETH) blockchain explorer. \nhttps://etherscan.io/\n. (Accessed on 05/21/2021)\nTikhomirov S, Voskresenskaya E, Ivanitskiy I, Takhaviev R, Marchenko E, Alexandrov Y (2018) Smartcheck: static analysis of ethereum smart contracts. In: 2018 IEEE/ACM 1st international workshop on emerging trends in software engineering for blockchain (WETSEB), pp 9\u201316\nvan Dam JK (2016) Identifying source code programming languages through natural language processing. PhD thesis, MS thesis, Faculty Sci., Math. Inform., Univ. Amsterdam, Amsterdam\nWang W, Song J, Xu G, Li Y, Wang H, Su C (2020) Contractward: automated vulnerability detection models for ethereum smart contracts. IEEE Trans Netw Sci Eng 8(2):1133\u20131144\nArticle\n\u00a0\n    \n\n                    Google Scholar\n\u00a0\n                \nWang X, Wang Y, Mi F, Zhou P, Wan Y, Liu X, Li L, Wu H, Liu J, Jiang X (2021) SynCoBERT: syntax-guided multi-modal contrastive pre-training for code representation. arXiv. \nhttps://doi.org/10.48550/ARXIV.2108.04556\n. \narXiv:https://arxiv.org/abs/2108.04556\nWu J (2021) Literature review on vulnerability detection using NLP technology\nYin P, Neubig G (2017) A syntactic neural model for general-purpose code generation. arXiv preprint \narXiv:1704.01696"
    }
}