{
    "threat_intelligence": {
        "url": "https://x.com/ShieldifyAnon/status/1808799370055242168",
        "timestamp": "2024-07-04 00:00:00",
        "original_content": "Oracle Manipulation ? It is\none of the most common attack vectors in DeFi, so both auditors and protocols\nneed to learn what it is and how to deal with it, so get your notepads out and\ndive into our thread.\n?Oracle Manipulation:\nTheory Firstly, let\u2019s figure out how and why we get the price. For simplicity,\nlet\u2019s have an example of the lending protocol Shieldify. Before letting to\nborrow funds, we want to get the current price. The safest way is to call\nChainlink\u2019s Price Feed and get an aggregate off-chain price, but it\u2019s often\nthe case when the protocol wants to use on-chain oracles (e.g. Uniswap). If we\nuse Uniswap, we call slot0 function to get the current price of an asset (e.g.\nWETH). The problem is that at that very moment, the price can be manipulated\nto be extremely high or low depending on the attacker\u2019s needs.\n\n[![Image](https://pbs.twimg.com/media/GRokd14XMAATSYh?format=jpg&name=900x900)](/ShieldifyAnon/status/1808799370055242168/photo/1)\n\nFor example, the current WETH price is $4000 and the user has deposited\nexactly 1 WETH. They want to borrow USDC, but LTV is 80%, which means they can\nget up to $3200. To calculate it in the protocol and not allow to take out\nmore than $3200, we have to get the price of the token, so we call slot0 on\nUniswap\u2019s Oracle contract. But, before depositing, the attacker decides to\nmake a big swap on Uniswap (involving flash-loans) leading to WETH's price\nincreasing from $4000 to $6000. Now, the max amount of USDC they can get is\n$4800 instead of $3200. They borrow $4800, swap on Uniswap back to $4000 WETH\nprice, return the flash loan and profit $800 ($4800 - $4000).\n?Oracle Manipulation: Code\nFor a deep dive into code, let\u2019s take a simple Lending & Borrowing protocol.\nBut, in this example, we will have a collateralization ratio of 120%. It\u2019s\nsimilar to the LTV that we used above, e.g. from $4000 worth of WETH, we\u2019ll\nget 3333 USDC.\n\n[![Image](https://pbs.twimg.com/media/GRokmmCaoAAzpGK?format=jpg&name=900x900)](/ShieldifyAnon/status/1808799370055242168/photo/2)\n\nAbove, you can see our borrow function and let\u2019s walk through it step by step.\nWe get the position struct for the msg.sender who\u2019s going to borrow. Then we\nincrease their borrowed amount by the value they input and collateral by the\nmsg.value they\u2019ve sent. After that, we check if the position is healthy, i.e.\nholds the 120% collateralization ratio. In the position health check, we get\nthe collateral price and then calculate the current collateralization ratio of\nthe position:\n\n[![Image](https://pbs.twimg.com/media/GRoksaNbMAIrdnQ?format=png&name=large)](/ShieldifyAnon/status/1808799370055242168/photo/3)\n\nIf the result is that the collateralization ratio is \u2265 120%, then it\u2019s healthy\nand unhealthy if it\u2019s less. But the main problem here is in the\ngetCollateralPrice() function.\n\n[![Image](https://pbs.twimg.com/media/GRokwj3WMAAwK8A?format=jpg&name=900x900)](/ShieldifyAnon/status/1808799370055242168/photo/4)\n\nAs you see, we get the price of USDC from Uniswap\u2019s slot0. So let\u2019s construct\nan attack path to manipulate the price and steal funds from this lending\nprotocol. The same as previously, the ETH price is $4000 and we want to borrow\nexactly 1 ETH of collateral. With a 120% collateralization ratio, we\u2019re able\nto borrow only 3,333 USDC. So here\u2019s what we have to do: 1\\. Make a large swap\non Uniswap, increasing the price to $6000. \u200d 2\\. Call `borrow` method with\n4800 USDC to borrow and 1 ETH as collateral. \u200d 3\\. Make a swap back, returning\nthe price to $4000, and repay the flash loan. \u200d 4\\. Results:    \\- Sent as\ncollateral 1 ETH = $4000.    \\- Profit is 5000 USDC = $5000 (120%\ncollateralization ratio).\n?Mitigation There are two\nof the most safe mitigations in this case: \\- TWAP \u2014 you can check about TWAP\nin one of our recent threads. \\- Off-chain oracles \u2014 one of the best examples\ncan be Chainlink or Pyth. \\- Combination of both \u2014 you can verify the data\nboth oracles give you in case one of them is compromised or goes offline.\n?Conclusion In conclusion,\noracle manipulation is a critical risk in DeFi, allowing attackers to exploit\nprice discrepancies for profit. To mitigate this, protocols should use\nsafeguards like Time-Weighted Average Price (TWAP) and reliable off-chain\noracles such as Chainlink or Pyth. Combining these methods enhances security\nby cross-verifying data and ensuring resilience against failures. These\nmeasures are essential for protecting the integrity and stability of the DeFi\necosystem."
    }
}