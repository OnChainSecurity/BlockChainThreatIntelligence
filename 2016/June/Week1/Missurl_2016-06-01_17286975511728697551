{
    "threat_intelligence": {
        "url": "https://www.mdpi.com/2813-5288/1/1/2",
        "timestamp": "2016-06-01 00:00:00",
        "original_content": "  1. Introduction\nThe concept of blockchain technology was initially introduced by Satoshi Nakamoto in Bitcoin [\n1\n], a cryptocurrency system. Decentralized transaction records are stored in the blockchain via cryptography to resist tampering. In December 2013, Vitalik Buterin presented the Ethereum white paper, introducing smart contract and enabling the development of a blockchain system capable of handling general value and functioning as a distributed transaction-based state machine [\n2\n]. Due to their decentralization and programmability, smart contracts have found extensive applications in various domains, including digital finance and future networks [\n3\n,\n4\n]. For example, the flash loan uses the execution principle of smart contracts, allowing users to take advantage of arbitrage opportunities in the market to achieve low-cost, high-yield operations [\n5\n]. In the context of future networks, the Multi-Identifier System (MIS) [\n6\n], operating as the management layer for co-management and Co-Governed Sovereignty Multi-Identifier Network (CoG-MIN) [\n7\n,\n8\n], utilizes identifier management contracts to enable flexible identifier functions and rule formulation.\nSmart contracts come in two main forms: high-level language code and Ethereum Virtual Machine (EVM) bytecode. There are currently many high-level languages that can be used to write smart contracts, the most popular of which is Solidity. The smart contract written by Solidity will first be compiled into EVM bytecode that can be directly accepted by the virtual machine and then sent to Ethereum by the user in the form of a Transaction for smart contract deployment. Additionally, developers have defined mnemonics called opcodes to map the meaning of the bytecode, making it easier to understand. The relationship between these three elements is shown in .\n\n\n\n\n\n\n\n\nFigure 1.\n\n      The relationship between the three forms of Ethereum smart contracts.\n\n\n  \n\n\nAs the adoption of smart contracts on blockchains has increased, numerous security challenges have emerged. Among them, the most notable incident was \u201cThe DAO\u201d [\n9\n] in June 2016. In 2022, there were 116 security incidents related to smart contract vulnerabilities, accounting for 27% of all blockchain security incidents, whose losses exceeded \n$\n1.7 billion [\n10\n]. In fact, due to the transparency of blockchain, the consequences of vulnerabilities in smart contracts are more severe than those in traditional programs. Anyone can access deployed contracts on the chain, allowing attackers to analyze contract bytecode and attempt to exploit any discovered vulnerabilities [\n11\n]. Moreover, once a contract is deployed, its owner faces limitations in making repairs unless he implements an upgradeable write mode.\nConsidering the difficulty in expecting developers to create completely secure contracts, extensive research efforts have been dedicated to vulnerability detection techniques for smart contracts. After the DAO attack in 2016, the research on smart contract security has witnessed significant growth year by year. Yamashita et al. [\n12\n] collected and individually classified a variety of common vulnerability patterns that could compromise the security of smart contracts. Praitheeshan et al. [\n13\n] investigated the vulnerability detection technology of smart contracts, introduced and compared the various characteristics of some smart contract vulnerability detection technologies. By conducting a systematic review and an analysis of the research progress in smart contract vulnerability detection technology, it was observed that, during 2019 and 2020, there was rapid development in this field. Various vulnerability detection methods were proposed, such as fuzz testing, taint analysis, formal verification, and machine learning, specifically applied to smart contract vulnerability detection. These vulnerability detection technologies have garnered extensive attention and research within the realm of smart contract security.\nThe aforementioned studies concerning smart contract vulnerability detection techniques have not comprehensively encompassed the diverse range of security vulnerabilities in smart contracts emerging within the Web 3.0 era [\n14\n]. Additionally, an issue of the inadequate comprehensive analysis of detection technology information exists [\n15\n]. Our investigation encompasses the progress and countermeasures of smart contract vulnerabilities in the current context of Web 3.0 development. We extensively analyze the disparities of existing technologies in terms of vulnerability coverage, detection effectiveness, open-source availability, and integration capabilities. We firmly believe that this endeavor contributes to a more comprehensive understanding, from the Web 3.0 perspective, of the existing smart contract vulnerability detection technologies among researchers.\nThe rest of this paper is organized as follows. \nSection 2\n introduces traditional smart contract vulnerabilities at the levels of Solidity, EVM, and the block, and further explores vulnerabilities in the context of Web 3.0 advancements. \nSection 3\n discusses common methods for smart contract vulnerability detection. \nSection 4\n presents an overview of mainstream vulnerability detection tools, followed by a comparison. \nSection 4\n takes CoG-MIN as an example to demonstrate the necessity of smart contract application security in the Web 3.0 era for building a community with a shared future in cyberspace. Finally, the paper concludes by summarizing the findings, discussing limitations in existing research, and providing suggestions for future investigation in \nSection 6\n.\n  4. Smart Contract Vulnerability Detection Tools and Comparison\nDrawing upon the classification of existing smart contract vulnerability detection methods outlined in \nSection 3\n, this chapter introduces several relevant tools. Moreover, a comprehensive comparison is conducted among these tools, taking into consideration factors such as vulnerability coverage, detection accuracy, availability of open-source information, and integration capabilities. Furthermore, an analysis is performed to examine the variations in efficiency observed in smart contract vulnerability detection across these tools.\n  4.1. Enumeration of Smart Contract Vulnerability Detection Tools\nWe conducted an extensive survey of the current smart contract vulnerability detection tools and selected the following five most representative tools for a detailed introduction.\nVulnerability as a Service (Vaas) [\n48\n] is a cloud-based service model for smart contract vulnerability scanning and analysis. Users can submit their own developed smart contracts to the Vaas platform, which performs static code analysis to examine the presence of known vulnerability patterns, coding errors, or potential security issues within the contracts. Additionally, dynamic execution is conducted on the contracts, simulating different execution paths and inputs to observe their behavior and state changes, aiming to detect any vulnerabilities or abnormal behavior that may exist.\nMythril [\n49\n] is an intelligent contract security tool based on EVM bytecode developed by ConSensys. It is designed to analyze smart contracts on EVM-compatible blockchains, such as Ethereum, Hedera, Quorum, Vechain, Roostock, and Tron. Mythril employs a combination of taint analysis, SMT solving, and symbolic execution techniques to identify vulnerabilities in smart contract code. Over time, Mythril has emerged as one of the most popular Ethereum smart contract security analysis tools.\nSecurify [\n50\n] is a tool used for the secure analysis of Ethereum contracts, capable of verifying the security of contracts for given properties. It examines the compliance and security vulnerabilities of contracts by analyzing the contract\u2019s dependency graph and extracting precise semantic information from the code. The security analysis process of Securify involves two main steps. Firstly, it performs a symbolic analysis of the contract\u2019s dependency graph and extracts semantic information from the code. Secondly, it checks for compliance and violation patterns to obtain sufficient conditions, thereby proving the validity of the given properties. Securify offers advantages such as scalability, full automation, and high accuracy.\nManticore [\n51\n] is an open-source framework for dynamic symbolic execution, specifically designed for analyzing binary files and Ethereum smart contracts. Its core engine component makes certain assumptions about the underlying execution model. The native binary symbolic execution module implements the high-level execution interface expected by the core engine.\nSlither [\n52\n] is a static analysis framework for smart contracts that encompasses over 30 vulnerability detection models. It is capable of detecting code optimization issues that might have been overlooked by compilers and provides optimization recommendations. Additionally, Slither has the ability to generate visual representations such as inheritance topology diagrams and method invocation graphs, which help developers comprehend the code structure and relationships.\n  4.2. Comparison of Existing Tools\nThe following provides a comparative analysis of the aforementioned smart contract detection tools.  presents 16 popular tools and compares their properties of vulnerability coverage, detection effectiveness, open-source availability, and integration capabilities.\n\n\nTable 1.\n\n    Comparison of smart contract vulnerability detection tools.\n  \n\n\n\n\n\n\nThe detection status presented in  is derived from the detection experimental results provided by the respective original authors of each tool in their respective papers, and these findings have been collated and synthesized. Additionally, certain papers include comparisons among various tools. For instance, the paper discusses comparisons of vulnerability coverage and accuracy between \u201coyente\u201d and other tools that build upon its improvements. This article utilizes these comparative analyses as references to supplement the table.\n  4.2.1. Vulnerability Coverage\nVulnerability coverage pertains to the tool\u2019s ability to detect and identify various types of smart contract vulnerabilities, including, but not limited to, integer overflows, uninitialized variables, permission control issues, and reentrancy attacks. An excellent vulnerability detection tool should offer a broad coverage of vulnerabilities, thereby comprehensively identifying potential security issues and enhancing the overall security of smart contracts.\nFrom the perspective of vulnerability types, most detection tools support the detection of vulnerabilities that have caused significant contract attack incidents, including reentrancy vulnerabilities, integer error vulnerabilities, Ethereum freeze vulnerabilities, and others. However, for less frequent and easily preventable vulnerabilities such as permission control, denial of service, and short address vulnerabilities, there are relatively fewer tools available for their detection. Among the commonly detected and easily detectable vulnerabilities, most detection tools support the detection of short address vulnerabilities.\n  4.2.2. Detection Effectiveness\nDetection effectiveness refers to the tool\u2019s accuracy and precision in identifying vulnerabilities. An effective vulnerability detection tool should minimize false positives and false negatives, providing specific and accurate vulnerability reports. Such tools enable developers to swiftly identify and address potential security issues, thereby bolstering the security of smart contracts.\nOyente was the first tool to utilize symbolic execution for identifying potential security vulnerabilities. Among 19,366 Ethereum contracts analyzed, it classified 8833 contracts as vulnerable. However, the tool exhibited a relatively high rate of false positives in its detection results. MAIAN [\n53\n], a dynamic symbolic executor, was specifically designed to detect self-destructing contracts. It employed inter-procedural symbolic analysis and concrete validation to uncover real vulnerabilities. Analyzing nearly one million contracts, MAIAN successfully reproduced real vulnerabilities with an 89% true positive rate on a subset of 3759 contracts, resulting in the identification of vulnerabilities in 3686 contracts.\nThe teEther tool combined binary slicing and symbolic execution to examine execution paths containing vulnerable instructions. It generated exploit samples and successfully analyzed 85.65% of the 784,344 accounts, reporting 1532 vulnerable accounts. On the other hand, ETHBMC [\n54\n] served as a symbolic execution-based automatic analysis framework for smart contracts. In comparison to teEther, ETHBMC identified an additional 10.3% of vulnerable accounts and 22.8% more vulnerabilities within a shorter time frame. Furthermore, ETHBMC was capable of identifying false positives in teEther and revealed additional vulnerabilities when compared to MAIAN.\n  4.2.3. Open-Source Availability\nOpen-source availability concerns whether the tool is open source and widely used by smart contract developers and auditors. Open-source tools offer higher transparency and credibility, allowing more individuals to contribute to their improvement and maintenance.\nIn the discussed section regarding smart contract vulnerability detection techniques, some of the detection tools provide the technical source code, while others do not. However, they offer web interfaces for utilizing the respective techniques. Smart contract developers can assess the security performance of their smart contracts on these web pages.\nIn the selection of development languages, the main application is Python, while some tools utilize Go, C++, and Solidity. The primary reasons for choosing a development language include language compatibility, ease of use, performance requirements, and developers\u2019 familiarity. Different languages can provide different functionalities and features. For instance, Python offers a rich library and tool ecosystem, facilitating tasks such as formal verification, symbolic execution, and vulnerability detection in smart contracts. Solidity, designed specifically for writing Ethereum smart contracts, possesses the capability to directly analyze the code structure and logic of smart contracts.\n  4.2.4. Integration Capabilities\nBased on the above discussions, it is evident that integrated tools exhibit more prominent performance in terms of vulnerability coverage and detection accuracy. Detection tools that rely on a single detection method have certain limitations, such as the low path coverage in fuzzing [\n55\n], the path explosion in symbolic execution [\n56\n], and the challenges of over-tainting and under-tainting in taint analysis [\n57\n]. Integrated tools effectively integrate each method\u2019s strengths, address their deficiencies, and enhance the overall detection performance. For instance, EthPloit [\n58\n] integrates taint analysis and fuzz testing techniques. By establishing the dependency relationship between variable data and variable control flow in the source code through taint analysis, EthPloit further enhances the fuzzing test cases based on this dependency relationship. As a result, the path coverage of fuzzing and the efficiency of vulnerability discovery are improved.\n  5. Future Directions and Challenges in Web 3.0\nAlthough blockchain technology possesses tremendous potential, security remains an unavoidable concern for such an automated, decentralized, and constantly evolving system [\n59\n]. Furthermore, as the exploration of the Web 3.0 ecosystem deepens, the developmental trend of the Internet will be a future network centered around individuals, supporting diverse identities, and featuring multi-party governance [\n60\n]. In the following, we use the future network domain as an example to elucidate the application of vulnerability detection in Web 3.0. Lastly, we delve into the challenges of vulnerability detection as one of the primary protective measures for constructing the underlying blockchain technology of the Web 3.0 era, focusing on aspects such as accuracy, efficiency, and adaptability to emerging vulnerabilities.\n  5.1. Community with a Shared Future in Cyberspace\nWith the development of blockchain technology in the future internet domain, the establishment of a co-governed network space community has become an inevitable trend in the era of Web 3.0. The CoG-MIN is proposed as a novel future network that centers on identity and supports the coexistence of multiple identifiers, including content, service, geographic location, and IP address, etc. The MIS is responsible for generating and managing various identifiers, storing the operation logs of users, issuing translation tables to MIR, and managing blockchain nodes [\n61\n]. The management functionality of multiple identifiers, such as identity, content, IP, and domain name in CoG-MIN, is implemented in the EMIS contract and various identifier space contracts. These functionalities include binding user identifiers to their real identities, verifying the publication of user identifiers, managing user public keys and certificates, as well as registering, modifying, revoking, resolving, and translating various identifiers.\nCurrently, a smart contract vulnerability detection system has been deployed within the MIS. It supports the simultaneous detection of specific vulnerabilities in the identifier management contracts as well as common vulnerabilities in general contracts, thus providing a reliable security guarantee for cyberspace constructed in CoG-MIN.\nConsidering the diverse characteristics of future network scenarios, CoG-MIN is proposed to achieve flexible and unified management of multiple identifiers, and its smart contract security is ensured through a smart contract vulnerability detection system, which supports simultaneous detection of special vulnerabilities in identity management contracts and six common vulnerabilities in general contracts, so as to provide reliable and efficient security for identity management contracts before the chaining review. Combining the advantages of symbolic execution and machine learning methods, not only reduces the contract detection time but also improves the accuracy and interpretability of vulnerability detection results.\nSmart contracts, as the infrastructure of cyberspace, directly influence the security and trustworthiness of the network environment. By ensuring the security of smart contracts, malicious attacks, data breaches, and contract vulnerabilities can be prevented, thus maintaining the stability and reliability of cyberspace [\n62\n]. The security of smart contracts also involves protecting user rights, ensuring the fairness and traceability of transactions, and contract execution [\n63\n]. Only by establishing a secure and trusted environment for smart contracts can all parties be encouraged to participate and collaborate, achieving interconnectedness and common development in cyberspace, and building a community with a shared future in cyberspace.\n  5.2. Challenges and Discussions\nThe application of smart contract vulnerability detection technologies reveals that their development is still in the early exploration stage, with certain limitations and challenges to address.\nEvolution of vulnerabilities:\n With the development of Web 3.0, the number and complexity of smart contract platforms and protocols will continue to increase, leading to more potential vulnerabilities and security risks. Therefore, smart contract security detection techniques need to constantly evolve and adapt to the characteristics and functionalities of emerging platforms and protocols. For instance, Ethereum introduced a new token standard, ERC777, which allows fallback functions to be invoked during token transfers. Due to developers\u2019 misunderstandings regarding the new features of ERC777, a new form of reentrancy vulnerability emerged, resulting in substantial financial losses for smart contracts.\nDynamic nature of smart contracts:\n Smart contracts often involve interactions and data flows among multiple contracts, including receiving external data and invoking external contracts. This dynamic nature adds complexity to the analysis and increases the number and types of potential vulnerabilities, since the behavior of external interactions is unknown and can lead to security loopholes. Therefore, vulnerability detection techniques need to be able to analyze and understand complex relationships among contracts and accurately identify potential security issues.\nInteroperability of smart contracts:\n Integration and interoperability of smart contracts with other technologies will also pose challenges. The Web 3.0 ecosystem will include multiple smart contract platforms and blockchain protocols, which may have incompatibilities and security vulnerabilities. Therefore, smart contract security vulnerability detection techniques need to have the capability to work across platforms and protocols to ensure comprehensive security.\nLimitations of detection methods:\n Most of the current techniques rely on vulnerability detection methods such as fuzz testing, symbolic execution, and formal verification, which themselves have limitations. For example, formal verification methods have advantages in verifying the correctness of smart contracts but are limited by contract size and complexity. Symbolic execution methods can explore different execution paths of contracts but may suffer from path explosion issues, leading to insufficient computational resources for complex contracts. Fuzz testing methods can uncover some implicit vulnerabilities but may have limited effectiveness in complex contract logic and data flow dependencies. Taint analysis methods can trace and analyze potential vulnerability sources in data flows but may not accurately identify and locate all vulnerabilities in complex data flows and interaction patterns.\nResource constraints:\n The rapid development of the Web 3.0 field has led to the emergence of numerous small projects and start-ups. However, these entities may face challenges in securing sufficient funds and professionals to conduct comprehensive smart contract security audits.\nSecure smart contracts are of utmost importance for establishing trust and reliability in decentralized systems. Within such systems, smart contracts serve as core components responsible for executing various functions and business logic. The presence of loopholes or unsafe code in smart contracts can lead to severe consequences, including fund losses, user information leaks, and service interruptions. Consequently, users\u2019 trust in the system may be severely undermined, potentially resulting in user churn and project failure. In the face of these challenges, the development of smart contract vulnerability detection requires several approaches.\nFor advancing smart contract vulnerability detection research, the following steps should be taken. Firstly, establishing a unified and comprehensive experimental dataset that covers vulnerability types and smart contract platforms is essential for providing reference data for security testing tools and machine learning model training. Secondly, regularly updating the vulnerability database is necessary, including collecting and organizing known contract vulnerabilities and attack techniques, so that smart contract vulnerability detection tools can identify and detect newly emerging vulnerabilities in a timely manner. Finally, from a systematic perspective, the development and improvement of new smart contract vulnerability detection techniques need to consider factors such as vulnerability detection rate, false positive rate, the exploitability of vulnerabilities, detection time, coverage of vulnerability types, and platform support.\nFor smart contract developers, the following recommendations can enhance the security posture of smart contracts and effectively mitigate potential vulnerabilities. Smart contract developers and teams should prioritize their training in smart contract security to recognize and prevent common vulnerabilities. Regularly auditing and reviewing smart contract codes is essential to detect any security issues. Additionally, utilizing reputable vulnerability detection tools can expedite issue identification. Collaborating to construct diverse and large-scale smart contract datasets enables more robust vulnerability detection. Lastly, continuous learning and staying updated on the latest developments in smart contract security are crucial for maintaining a secure environment.\n  6. Conclusions\nSmart contracts are one of the most promising technologies, providing a rich, secure, and trusted decentralized application landscape. They align with the practical significance of digital finance and future network. However, the accompanying security issues have severely hindered their development. Smart contract vulnerability detection technology has emerged as a new research hotspot. This paper examines a series of smart contract vulnerability detection techniques proposed by researchers. These techniques are categorized as follows: formal verification, symbolic execution, fuzzing, and taint analysis. The paper also introduces smart contract vulnerability detection tools within each of these five categories. Furthermore, it presents a statistical analysis of the existing tools, covering vulnerability types, open-source information, and integration methods. Finally, taking the network community of the Web 3.0 era as an example, the limitations and potential improvements of existing smart contract vulnerability detection methods are discussed and analyzed.\n\n"
    }
}