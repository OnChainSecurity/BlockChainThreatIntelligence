{
    "threat_intelligence": {
        "url": "https://www.mdpi.com/2079-9292/12/14/3180/xml",
        "timestamp": "2022-06-23 00:00:00",
        "original_content": "  1. Introduction\nBlockchain is a distributed, open-source, immutable, public digital ledger shared among connected peers [\n1\n]. Each block contains details of transactions and assets (i.e., ether or bitcoin) exchanged between users. Ethereum is a special type of blockchain platform that includes more than just monetary transactions. Users can create smart contracts on it to run different types of applications [\n2\n]. The code for smart contracts is executed during the mining process, which makes the data structure of Ethereum more complex than other blockchains.\nEthereum [\n3\n], the second largest blockchain platform, has been worth nearly \n$\n100 billion since its launch in 2015 and is also the largest blockchain platform in support of smart contracts today. However, with its rapid development, several issues related to various cybercrimes, such as money laundering, phishing, bribery, and Ponzi schemes, have been rapidly increasing. Money laundering, in particular, has become an issue worrying the world. In cryptocurrencies like Ethereum, decentralization can easily resist control and censorship [\n2\n]. Transactions are difficult to link to real people because of their anonymity, which makes them highly attractive to money launderers. Although governments and international organizations have implemented some strict anti-money laundering (AML) regulations, the problem of money laundering on Ethereum is still severe.\nAs of 17 August 2022, Tornado Cash received 74.7% of the total amount laundered on the Ethereum network, up to ETH 300,160, with another approximately 24% still in the hackers\u2019 wallets, while 1.5% was sent to trading platforms, according to a report by SlowMist [\n4\n]. The FBI announced on its website [\n5\n] that the North Korean hacker group Lazarus Group and APT38 were the attackers of Harmony Bridge, a hacker group that used malware called TraderTraitor and a privacy protocol called Railgun to launder more than USD 60 million stolen from Ethereum on 23 June 2022. Such money laundering cases have increased in recent years. Therefore, it is essential to investigate more effective detection methods for money laundering crimes for Ethereum.\nMalicious behavior with Ethereum includes attacks that exploit vulnerabilities in smart contract code, such as honeypot contracts. These vulnerabilities in the code can be verified and analyzed using formal modeling methods [\n6\n,\n7\n]. As for other malicious behaviors, such as phishing scams, money laundering, gambling, Ponzi schemes, etc., researchers in previous studies usually detect them in one category. However, money laundering for Ethereum is significantly different from other malicious activities. Phishing scams for Ethereum, for example, typically employ emails and phishing websites to obtain sensitive information and money from users. Money laundering, on the other hand, is the process by which stolen money obtained by hacking and other means is laundered through layers and disguised as legitimate funds. The transaction patterns of money laundering accounts and phishing scam accounts are also very different in terms of money trajectories [\n8\n]. Therefore, we would like to subdivide these categories to more specifically characterize the money laundering accounts among them and design an algorithmic model specifically for money laundering detection. Since blockchain data are transparent and we can directly access all transaction data by synchronizing the full nodes, it is very intuitive to collect blockchain data and analyze the patterns in them. In order to accurately identify whether an Ethereum account is a money laundering account or a normal account, it is critical to extract features that accurately represent a money laundering address.\nEthereum\u2019s transaction records can be constructed as a high-dimensional graph of financial transactions. Analyzing the graph can help us to make good use of the information hidden in the graph. The graph embedding algorithm can convert a high-dimensional graph into a single or a set of low-dimensional vectors, preserving the structure and information of the graph, and the whole feature extraction process is automated [\n9\n]. Therefore, for data analysis in Ethereum, graph embedding is a more efficient method. In graph embedding, the weights on the edges can more accurately reflect the similarity between nodes. Therefore, we focus on the impact of the money launderer\u2019s behavioral patterns on the labels in the transaction records of Ethereum. The gas price in Ethereum transaction records can be set by the trader and affect the processing speed of the transaction, and money launderers usually want to disperse their funds as quickly as possible. The timestamp in the transaction records represents the time of each transaction and can reflect the degree of correlation between transactions. Therefore, we choose to enhance feature extraction by fusing the gas price with the timestamp as the weights of edges in the input graph.\nIn this paper, we first obtain the real transaction data and addresses with money laundering labels from authoritative Ethereum websites and construct a large-scale Ethereum transaction network. By merging the gas price and timestamp and considering the network\u2019s structural information, we propose a graph embedding algorithm based on a biased random walk called GTN2vec. We obtain the embeddings of nodes by GTN2vec and use various classifiers, such as random forest, for the classification task. Overall, the contributions of our paper are as follows:\nWe propose a novel Ethereum money laundering-detection scheme based on an improved graph embedding-based algorithm called GTN2vec. To the best of our knowledge, it is the first algorithm dedicated to detecting Ethereum money laundering accounts precisely.\nFor the first time, this algorithm uses gas price and timestamp in the Ethereum transaction network as auxiliary information for graph embedding. It comprehensively considers the behavioral patterns of money launderers and the structural information of the transaction network, which can accurately extract the characteristics of money laundering addresses on Ethereum.\nWe obtain real money laundering addresses from Ethereum and construct the dataset. On the real dataset, we evaluate the effectiveness of GTN2vec. Experimental results show that the GTN2vec algorithm outperforms other advanced graph embedding methods.\nThe rest of this paper is organized as follows. \nSection 2\n introduces our paper\u2019s background, including Ethereum, graph embedding algorithms, money laundering, and related works. \nSection 3\n presents the technical details of the proposed overall detection framework and the GTN2vec embedding algorithm. \nSection 4\n describes the experimental evaluation of the proposed approach\u2019s effectiveness in detecting Ethereum money laundering. Finally, we conclude the paper in \nSection 5\n.\n  3. Methodology\nIn this section, we propose a graph embedding-based GTN2vec algorithm for money laundering detection.\n  3.1. Overview\nAs shown in , the overall framework we use to detect money laundering is divided into three parts. First, we obtain the Ethereum real data to construct the graph dataset as an input to the graph embedding. In the graph, we denote addresses with money laundering markers in orange and normal addresses in blue. Using these addresses as source points, we obtain records of transactions between them and their adjacent second-order neighbors. Each edge contains the gas price and timestamp of that transaction, ultimately constructing a directed weighted graph. In the second part, we design a GTN2vec biased random walk strategy that can proportionally fuse the gas price and timestamp of the transaction edges into new weights and generate the transition probability of the walk in conjunction with the structure of the graph. Based on the transition probability, the algorithm obtains embedding vectors that represent the characteristics of each node. Ultimately we use the embedding vectors of the nodes for the classification task to identify the money laundering accounts. The details of our dataset construction approach and the rationale for the GTN2vec algorithm are described next.\n\n\n\n\n\n\n\n\nFigure 1.\n\n      GTN2vec money laundering detection framework (author\u2019s own processing).\n\n\n  \n\n\n  3.2. Ethereum Money Laundering Dataset\nMoney laundering on Ethereum is when hackers obtain large amounts of illicit funds after committing theft or fraud and launder the funds through layers of transfers. Obtaining account information and transaction records involved in money laundering crimes on Ethereum to construct graphs is a prerequisite for solving money laundering detection problems using graph analysis. In November 2019, the Upbit exchange was hacked to steal 342,000 ETH (USD 48.1 million).In the year following this highly influential case, hackers continued to launder the stolen funds by sending them to major exchanges through decentralized transfers and other means. The judiciary, blockchain security research organizations, and major exchanges joined forces to analyze the money laundering patterns and continuously track the flow of funds, which led to the freezing and recovery of some of the funds. In this experiment, we use all the addresses that have been labeled as \u201cUpbit Hack\u201d in this case as money laundering accounts.\nFirst, we obtained all transaction records on Ethereum by synchronizing all block data up to June 2022 through the Ethereum Geth client. Each transaction record contains the address of the sender and receiver of the transaction, the transaction hash, the transaction amount, the gas price, the timestamp, and other information. Our approach requires some of the information on the transaction records as an aid for the subsequent embedding phase.\nSecond, we obtained the addresses of 815 EOA and smart contract accounts tagged with the Upbit Hack, according to Etherscan (\nhttps://etherscan.io/\n (accessed on 15 May 2022)), the authoritative Ethereum block browser. The detection of money laundering accounts in Ethereum can be modeled as a binary classification problem, so we randomly selected 815 addresses of accounts without money laundering labels as normal data from the span of blocks involved in the data with money laundering labels. To ensure that these non-money laundering accounts were normal enough, we further compared them to the 1259 fraud accounts in the Ethereum Fraud dataset [\n22\n]. In the end, we selected 815 accounts that did not have any negative labels.\nFinally, we obtained the 2-order transaction records for 815 money laundering and 815 normal addresses. We represent each account address as a network node and each transaction between the accounts as an edge connecting the nodes. By taking the 1630 nodes as centroids, all transactions from each centroid to within its 2-order neighbors are tracked, constituting a large number of directed weighted subgraphs. After cleaning the duplicate and failed transactions, we combine all the subgraphs to construct a large directed weighted financial transaction graph as the required dataset for the experiment. The final dataset size is 45,585 nodes and 53,356 edges.\n  3.3. GTN2vec Algorithm\n  3.3.1. Problem Definition\nThe gas price is the cost of transaction execution on the Ethereum network, which determines the total fee for a given transaction and is related to transaction speed and trustworthiness. A high gas price indicates that the transaction may involve enormous amounts of money. Criminals are usually eager to send illegal funds to financial institutions. By setting a higher gas price, they can ensure that the transaction is prioritized. Moreover, in order to avoid supervision, money launderers usually split large sums of money into several small sums that do not attract attention, and disperse them. Therefore, we consider that the gas price can be used to distinguish money laundering activities from normal activities more prominently than the transaction amount. The timestamp contains the time information of each transaction, and time is also a basic factor in the transaction analysis. In the stage of the decentralized transfer of stolen money, criminals have a strategy for the transaction time and the choice of recipients. It is very important to understand the time pattern of funds in and out of the transfer. The fusion of gas price and timestamp as the weight of the input graph can be extremely effective in assisting the feature extraction of nodes in the graph embedding process. Therefore, we propose a graph embedding algorithm based on a biased random walk, which uses the gas price and time stamp to facilitate embedding while considering local and global information about the transaction network. Algorithm 1 shows the pseudocode of GTN2vec. We summarize the relevant notations in .\n\n\nTable 1.\n\n    Summary of notations (author\u2019s own processing).\n  \n\n\n\n\n\n\nWe denote the constructed directed weighted graph as \n\n=\n(\n\n,\n\n)\nG\n=\n(\nV\n,\nE\n)\n, where \nV\n is a node set, and \nE\n is an edge set. For each edge \n(\n\n,\n\n)\n\u2208\n\n(\nu\n,\nv\n)\n\u2208\nE\n, \n\n(\n\n,\n\n)\nw\n(\nu\n,\nv\n)\n represents the gas price on the edge pointing from node \nu\n to node \nv\n, and \n\n(\n\n,\n\n)\nt\n(\nu\n,\nv\n)\n represents the timestamp on the edge pointing from node \nu\n to node \nv\n. Given a graph \nG\n and a dimension \nd\n, we aim to learn the mapping function \n(\n\n:\n\n\u2192\n\u211d\n\u2223\n\n\u2223\n\u00d7\n\n)\n(\nf\n:\nV\n\u2192\nR\n\u2223\nV\n\u2223\n\u00d7\nd\n)\n from nodes to node embeddings while preserving as much information about the nodes as possible. Graph embedding is divided into two steps, and we first perform a graph-based random walk. Given a source node \nu\n, by sampling the neighborhoods of the nodes through a specific search strategy, information about the nodes and the network structure is captured in the form of node sequences. The node sequences are then embedded using the Skip-gram architecture. Skip-gram is a Word2vec model that predicts the context from the target vocabulary. Here, we input the node sequences into the model, and by maximizing the probability of predicting neighboring nodes, Skip-gram can train and learn the prediction of neighboring nodes. The sampling strategy we devised during the random walk phase is described next.\n          \nAlgorithm 1\n The GTN2vec algorithm.\nLearnFeatures\n (Transaction graph \n\n=\n(\n\n,\n\n,\n\n)\nG\n=\n(\nV\n,\nE\n,\nA\n)\n where \nA\n includes the gas price and timestamp on each edge, dimentions \nd\n, walks per node \nr\n, path length \nl\n, context size \nc\n, return \np\n, exploration \nq\n, balance \n\n\u03b1\n)\n\n=\n\u03c1\n=\n TransitionProbability \n(\n\n,\n\n,\n\n,\n\n)\n(\nG\n,\np\n,\nq\n,\n\u03b1\n)\n\n\u2032\n=\n(\n\n,\n\n,\n\n)\nG\n\u2032\n=\n(\nV\n,\nE\n,\n\u03c1\n)\nInitialize \n\n\n\n\u210e\n\np\na\nt\nh\ns\n to \u2205\nfor\n\u00a0\n\n=\n1\nm\n=\n1\n to \nr\n\u00a0\ndo\n\u00a0\u00a0\u00a0\u00a0\nfor\n each node \n\n\u2208\n\nx\n\u2208\nV\n\u00a0\ndo\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\n\n\u210e\n=\np\na\nt\nh\n=\n GTN2vecWalk(\n\n\u2032\n,\n\n,\n\nG\n\u2032\n,\nx\n,\nl\n)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Append \n\n\n\n\u210e\np\na\nt\nh\n to \n\n\n\n\u210e\n\np\na\nt\nh\ns\n\n=\nf\n=\n StochasticGradientDescent \n(\n\n,\n\n,\n\n\n\n\u210e\n\n)\n(\nc\n,\nd\n,\np\na\nt\nh\ns\n)\nreturn\n\u00a0\n                        \nf\nGTN2vecWalk\n (Graph \n\n\u2032\n=\n(\n\n,\n\n,\n\n)\nG\n\u2032\n=\n(\nV\n,\nE\n,\n\u03c1\n)\n, Start node \nx\n, Path length \nl\n )\nInitialize \n\n\n\n\u210e\np\na\nt\nh\n to \n[\n\n]\n[\nx\n]\nfor\n\u00a0\n\n\n\n\u210e\n_\n\n=\n1\np\na\nt\nh\n_\nm\n=\n1\n to \nl\n\u00a0\ndo\n\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n=\n\n\n\n\u210e\n[\n\u2212\n1\n]\nn\no\nd\ne\nc\nu\nr\n=\np\na\nt\nh\n[\n\u2212\n1\n]\n\u00a0\u00a0\u00a0\u00a0\n\n\n\n\n\n\n\n\n=\nV\nc\nu\nr\nn\no\nd\ne\n=\n GetNodeNeighbors(\n\n\n\n\n\n\n\n,\n\n\u2032\nn\no\nd\ne\nc\nu\nr\n,\nG\n\u2032\n)\n\u00a0\u00a0\u00a0\u00a0\n\n=\ns\n=\n AliasSample(\n\n\n\n\n\n\n\n\n,\n\n)\nV\nc\nu\nr\nn\no\nd\ne\n,\n\u03c1\n)\n\u00a0\u00a0\u00a0\u00a0Append \ns\n to \n\n\n\n\u210e\np\na\nt\nh\nreturn\n\u00a0\n                        \n\n\n\n\u210e\np\na\nt\nh\n  3.3.2. Random Walk\nGiven a source node \nu\n, walk \nl\n steps from \nu\n, selecting its neighbor nodes each time according to a specific transition probability. Finally, a sequence of nodes of length \nl\n is generated. Specifically, let the \ni\nth node of the sequence be \n\n\nb\ni\n, and the probability of selecting a given neighbor node \nx\n as \n\n\nb\ni\n starting from \n\n\n\u2212\n1\n=\n\nb\ni\n\u2212\n1\n=\nu\n is\n          \n\n\n\n\n\n(\n\n\n=\n\n|\n\n\n\u2212\n1\n=\n\n)\n=\n\u23a7\n\u23a9\n\u23a8\n\n\n\n\n\n\n,\n0\n,\nif\n(\n\n,\n\n)\n\u2208\n\notherwise\nP\n(\nb\ni\n=\nx\n|\nb\ni\n\u2212\n1\n=\nu\n)\n=\n\u03c1\nu\nx\nZ\n,\nif\n(\nu\n,\nx\n)\n\u2208\nE\n0\n,\notherwise\n\n\n\n\n\n\n(1)\n\n\n\n\n\n          where \n\n\n\n\u03c1\nu\nx\n is the transition probability of node \nu\n to \nx\n. We normalize it by the constant \nZ\n.\n  3.3.3. Search Strategy\nThe critical issue in the random walk process is whether the sampled node neighborhoods are comprehensive enough to preserve the graph properties and accurate node characteristics. Among several current random walk-based graph embedding algorithms, DeepWalk [\n14\n] was the first to use a random walk mechanism for each node. The transition probability from the source node to each neighbor is the same. The random sampling of neighboring nodes is repeated until a sequence of nodes of length \nl\n is found. Node2vec [\n23\n] defines two parameters based on DeepWalk to make the random walk have the properties of both depth-first sampling (DFS) and breadth-first sampling (BFS) by adjusting the transition probability between nodes.\nWhen detecting money laundering nodes, it is not enough to use the general graph embedding method. For a complex financial transaction network such as Ethereum, the information on the transaction edges cannot be ignored, and choosing the correct information can better characterize the target node. Therefore, we use the critical information of the gas price and timestamp as the new attributes affecting the embedding for the first time based on Node2vec. During the random walk, these new attributes can cause the neighboring node that is more closely connected to the source node to be selected as the next node.\nWe define three parameters in the algorithm, the return parameter \np\n, the exploration parameter \nq\n, and the balance parameter \n\n\u03b1\n. In a random walk, the size of parameter \np\n determines whether to return to the previous node in the next step. The parameter \nq\n determines whether the neighborhood sampling is closer to BFS or DFS. If \n\n>\n1\nq\n>\n1\n, then the random walk favors BFS and biases the selection of the surrounding nodes. If \n\n<\n1\nq\n<\n1\n, the random walk tends to be DFS, preferring to visit distant nodes. The parameter \n\n\u03b1\n balances the gas price and timestamp weight in the transition probability, respectively. With these three parameters, we comprehensively consider the key factors that may affect the embedding of money laundering nodes. Specifically, as shown in , in a random walk, suppose the current node is \nu\n, which has just been transferred from node \nm\n and now needs to decide the next step. We denote \n\n\nV\nu\n as the set of all neighboring nodes that can be reached directly from node \nu\n. The transition probability \n\n\n\n\u03c1\nu\nx\n from node \nu\n to its neighboring node \n\n\u2208\n\n\nx\n\u2208\nV\nu\n is given by\n          \n\n\n\n\n\n\n\n=\n\n\n\n\n\n\u00b7\n\n\n\n(\n\n,\n\n)\n\u03c1\nu\nx\n=\nP\nw\nt\nu\nx\n\u00b7\n\u03b2\np\nq\n(\nm\n,\nx\n)\n\n\n\n\n\n\n(2)\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.\n\n      Illustration of the random walk procedure in GTN2vec (author\u2019s own processing).\n\n\n  \n\n\nUsing the parameter \n\n\u03b1\n, we fuse the gas price and timestamp on edge \n(\n\n,\n\n)\n(\nu\n,\nx\n)\n starting from \nu\n in the most appropriate ratio. We denote \n\n(\n\n,\n\n)\nw\n(\nu\n,\nx\n)\n and \n\n(\n\n,\n\n)\nt\n(\nu\n,\nx\n)\n as the gas price and timestamp of the latest transaction from node \nu\n to \nx\n. The fused weight \n\n\n\n\n\nP\nw\nt\nu\nx\n can be calculated as follows:\n\n\n\n\n\n\n\n\n\n=\n\n\n\n\n\n\u00b7\n\n\n1\n\u2212\n\n\n\nP\nw\nt\nu\nx\n=\nP\nw\nu\nx\n\u03b1\n\u00b7\nP\nt\nu\nx\n1\n\u2212\n\u03b1\n\n\n\n\n\n\n(3)\n\n\n\n\n\n\n\n\n\n\n\n\n=\n\n(\n\n,\n\n)\n\u2211\n\n\u2032\n\u2208\n\n\n\n(\n\n,\n\n\u2032\n)\nP\nw\nu\nx\n=\nw\n(\nu\n,\nx\n)\n\u2211\nx\n\u2032\n\u2208\nV\nu\nw\n(\nu\n,\nx\n\u2032\n)\n\n\n\n\n\n\n(4)\n\n\n\n\n\n\n\n\n\n\n\n\n=\n\n(\n\n,\n\n)\n\u2211\n\n\u2032\n\u2208\n\n\n\n(\n\n,\n\n\u2032\n)\nP\nt\nu\nx\n=\nt\n(\nu\n,\nx\n)\n\u2211\nx\n\u2032\n\u2208\nV\nu\nt\n(\nu\n,\nx\n\u2032\n)\n\n\n\n\n\n\n(5)\n\n\n\n\nDepending on the shortest distance from node \nm\n to \nx\n, we use the parameters \np\n and \nq\n further to adapt the search process between DFS and BFS to obtain information about the graph\u2019s structure: \n\n\n\n\n\n\n\n(\n\n,\n\n)\n=\n\u23a7\n\u23a9\n\u23a8\n\n\n\n\n\n\n1\n\n,\n1\n,\n1\n\n,\nif\nd\nmx\n=\n0\nif\nd\nmx\n=\n1\nif\nd\nmx\n=\n2\n\u03b2\np\nq\n(\nm\n,\nx\n)\n=\n1\np\n,\nif\nd\nmx\n=\n0\n1\n,\nif\nd\nmx\n=\n1\n1\nq\n,\nif\nd\nmx\n=\n2\n\n\n\n\n\n\n(6)\n\n\n\n\nThus, our approach is to first perform \nr\n random walks of walk length \nl\n from each source node, where each step is chosen based on the transition probability \n\n\n\n\u03c1\nu\nx\n, which takes into account the gas price, timestamp, and structural information of the graph, and then perform node representation learning using the Skip-gram method of Word2vec.\n  4. Experiment\nWe experimentally demonstrate the effectiveness of this algorithm in this section. All experiments are run on a desktop computer configured with Intel Core i5-9400 CPU @ 2.90 GHz and 8 GB RAM. The operating system is Windows 10, and the programming language is Python 3.7.0.\n  4.1. Dataset\nAs stated in \nSection 3\n, in order to perform the node embedding and downstream node classification tasks, we need to construct an input graph. First, we write scripts to collect second-order transaction records for each of the 1630 addresses through the API provided by etherscan for developers and saved them as CSV files. We then merge these transaction records into a single CSV file, removing duplicate transactions, failed transactions, and handling nulls. We keep only the sender address, receiver address, gas price, and timestamp of each transaction. Finally, the directed weighted graph is constructed through Networkx. The dataset contains 45,585 nodes and 53,356 edges. Among them, money laundering addresses are labeled as 1, and normal addresses are labeled as 0. We divide the dataset with 80% as the training data and the remaining part as the test data. Considering the training speed for large-scale data, we finally choose the random forest classifier.\n  4.2. Baseline Method\nOur experiments evaluate the learning effectiveness of the GTN2vec algorithm for money laundering node features through a node classification task and compare the following two graph embedding algorithms as a baseline. The sampling strategy of DeepWalk, in which the transition probability from the source node to all neighboring nodes is equal, is more random and does not pay special attention to the network structure. Node2vec builds on DeepWalk by adding \np\n and \nq\n parameters to capture the local and global network structures. However, it does not pay attention to the impact of auxiliary information on the embedding performance in a particular network.\nWe want to focus on comparing the effect of the random walk strategy of different embedding methods on the characterization of money laundering nodes. Therefore, to be as fair as possible, we input the same dataset and basic parameters for each algorithm in the sampling phase so that they capture the same length of node sequences and the same number of iterations per walk. Specifically, the basic parameters are set to \nd\n = 128, \nr\n = 80, \nl\n = 80, and \nc\n = 10. For GTN2vec and Node2vec, which further consider the network structure, we uniformly set \np\n = 1 and \nq\n = 0.8. For the balance parameter \n\n\u03b1\n in GTN2vec, we set \n\n=\n0.7\n\u03b1\n=\n0.7\n. For each algorithm, we choose the random forest classifier with a number of estimators ranging from 120 to 1200 and a maximum depth from 5 to 30. The hyperparameters for the best performance are obtained by using a grid search with 5-fold cross validation and repeated 50 times, and we compare the average results.\nDepending on the true category of the sample and the recognition by the classifier, there are four cases as follows: true positive\u2014the true category is positive and is recognized as positive by the classifier; true negative\u2014the true category is positive but is recognized as negative by the classifier; false positive\u2014the true category is negative but is recognized as positive by the classifier; and false negative\u2014the true category is negative and is recognized as positive by the classifier. We judge our classification effectiveness by four evaluation metrics, i.e., precision, recall, F1-score, and accuracy. The four metrics are defined as follows:\n\n\n\n\nPrecision\nRecall\nF\n1\n\u2212\nscore\nAccuracy\n=\n=\n=\n=\ntrue\npositive\ntrue\npositive\n+\nfalse\npositive\ntrue\npositive\ntrue\npositive\n+\nfalse\nnegative\n2\n\u00d7\nPrecision\n\u00d7\nRecall\nPrecision\n+\nRecall\ntrue\npositive\n+\ntrue\nnegative\nTotal\nPrecision\n=\ntrue\npositive\ntrue\npositive\n+\nfalse\npositive\nRecall\n=\ntrue\npositive\ntrue\npositive\n+\nfalse\nnegative\nF\n1\n\u2212\nscore\n=\n2\n\u00d7\nPrecision\n\u00d7\nRecall\nPrecision\n+\nRecall\nAccuracy\n=\ntrue\npositive\n+\ntrue\nnegative\nTotal\n\n\n\n\n\n\n\n\n  4.3. Classification Performance\nWe compare the classification performance of different graph embedding algorithms as shown in . The experimental results show that the GTN2vec algorithm we design has the best Ethereum money laundering detection results, with an average accuracy of 95.7%. All three graph embedding algorithms perform well in the classification task, indicating that the graph embedding technique is well suited to deal with the anomaly detection problem in financial networks such as Ethereum. Among them, Node2vec slightly outperforms DeepWalk, indicating that careful consideration of the local and global structure of the network can effectively improve the embedding performance. GTN2vec significantly improves over Node2vec, indicating that the gas price and timestamp can significantly improve the characterization of money laundering nodes. Therefore, it can be concluded that the network structure and specific auxiliary information can effectively help capture the characteristics of target nodes in money laundering detection. Moreover, the experimental results also verify our inference that gas price and timestamp can indeed reflect the specific behavioral patterns of money laundering addresses to a large extent.\n\n\nTable 2.\n\n    Classification performance of several graph embedding algorithms (author\u2019s own processing).\n  \n\n\n\n\n\n\nConsidering the performance of the classifier will also have some impact on the experiment. In addition to random forest, we select several commonly used classifiers for comparisons, such as logistic regression, SVM, XGBoost, and naive Bayes. The experimental results are shown in , and it can be observed that our proposed GTN2vec algorithm performs very well with different classifiers, which further proves that GTN2vec is very comprehensive in extracting the features of money laundering nodes. In addition, we experiment with DeepWalk and Node2vec on different classifiers and find that random forest is the best choice for each graph embedding algorithm.\n\n\nTable 3.\n\n    Performance of GTN2vec with multiple classifiers (author\u2019s own processing).\n  \n\n\n\n\n\n\n  4.4. Parameter Sensitivity\nWe investigate the effect of each parameter in the GTN2vec algorithm on the results. To fully account for the accuracy and recall of the algorithm, we choose the F1-score as the measure. For each parameter tested, default values are used for all other parameters. The effect of each parameter on the F1-score is shown in . We observe that increasing the dimension \nd\n and the number of walks \nr\n can significantly improve the performance of GTN2vec because higher-dimensional feature vectors can retain more complex node information, and a larger number of walks can reduce randomness and retain more realistic relationships between nodes. The length \nl\n of the node sequence has less impact on the performance of GTN2vec; we speculate that \nl\n is already much larger than the number of neighbors that some nodes can access, but a longer sequence still improves the representation of the nodes.\n\n\n\n\n\n\n\n\nFigure 3.\n\n      Effect of each parameter of GTN2vec on classification results (author\u2019s own processing). (\na\n) Dimension, \nd\n. (\nb\n) Walks per node, \nr\n. (\nc\n) Length of walk, \nl\n. (\nd\n) Balance, \n\n\u03b1\n.\n\n\n  \n\n\nFor the balance parameter \n\n\u03b1\n, if \n\n=\n0\n\u03b1\n=\n0\n, it means only the timestamp on the connection edge, and conversely, if \n\n=\n1\n\u03b1\n=\n1\n, it means that only the gas price is influential. We adjust \n\n\u03b1\n from 0 to 1, explore its effect on the F1-score through lots of experiments, and finally find that the detection effect is optimal when \n\n=\n0.7\n\u03b1\n=\n0.7\n, which is significantly better than both gas price only and timestamp only. Therefore, the combination of the gas price and timestamp is helpful for feature extraction, where the gas price can facilitate embedding more than the timestamp.\nFor the values of the return parameter \np\n and the exploration parameter \nq\n, we first test the effect of a single variable on the experiment. For the parameter \np\n, the results indicate that GTN2vec performs better when \n\n\u2265\n1\np\n\u2265\n1\n. In contrast, the exact opposite is true for \nq\n. GTN2vec performance is higher when \n\n<\n1\nq\n<\n1\n. These results indicate that the optimal strategy is not to return to the previous node and explore further away during the random walk. We also conduct experiments with different combinations, select several representative combinations as shown in  and find the best results obtained when \n\n=\n1\n,\n\n=\n0.8\np\n=\n1\n,\nq\n=\n0.8\n.\n\n\nTable 4.\n\n    F1-score performance of several representative combinations of return parameter \np\n and exploration parameter \nq\n in GTN2vec (author\u2019s own processing).\n  \n\n\n\n\n\n\n  4.5. Discussion\nIn our experiments, we trained the algorithmic model using data labeled with money laundering and achieved 95.7% recognition accuracy on the test set. Moreover, our algorithm has good generalization ability and can adapt well to fresh data, so it has high usability. In practical applications, the GTN2vec model can be utilized for suspicious address identification services. Since all the transaction data of Ethereum are open and transparent, it can obtain the transaction records of the target address through the API of the etherscan website, and retain the gas price and timestamp information in the records. The list of transactions is fed into the algorithmic model to be able to obtain the identification results.\nThe anti-money laundering systems currently used by financial institutions, such as cryptocurrency exchanges, are typically strict rule-based systems. The system continuously monitors each transaction through complex rules and generates timely alerts for suspicious transactions, such as sudden large fund transfers. However, such systems can incorrectly raise an alert on a large number of normal transactions, with a false positive rate typically around 95\u201398%. Some financial institutions arrange for 5000 or more employees to verify each alerted transaction [\n25\n]. This model is very inefficient and wastes a lot of human resources. Our model can further identify money laundering on the accounts involved in the alerts after they are generated by the system. By helping regulators filter out false alerts and pinpoint suspicious accounts, we can improve the efficiency of later reviews.\n  5. Conclusions\nIn this paper, we propose a graph embedding algorithm GTN2vec for money laundering detection in Ethereum by fusing the gas price and timestamp of transactions as auxiliary information for the first time, taking into account the local and global structure of the graph. We first obtain real money laundering addresses from Ethereum and construct the dataset. Then, the money laundering nodes are embedded by GTN2vec to generate vectors that capture the node information and network structure. Finally, the effectiveness of node embedding is verified by classifiers such as random forest. The experimental results show that GTN2vec can accurately and effectively detect money laundering nodes on Ethereum with an average accuracy of 95.7%, which is better than other graph embedding methods.\nExisting research has paid little attention to money laundering in Ethereum, which makes our work lack a directly comparable reference. Moreover, our work may have little ability to harness future changes, such as the Ethereum upgrades. In our future work, we will study more deeply the association between money laundering and other potential features in the transaction records to further improve the user profile of money launderers and increase identification accuracy.\n\n"
    }
}