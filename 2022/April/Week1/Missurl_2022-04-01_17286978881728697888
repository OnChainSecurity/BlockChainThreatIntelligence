{
    "threat_intelligence": {
        "url": "https://hacken.io/discover/blockchain-oracles/",
        "timestamp": "2022-04-01 00:00:00",
        "original_content": "\n\nWhether you\u2019re just getting started or a seasoned Web3 developer, understanding blockchain oracles is crucial. They\u2019re the backbone that connects your smart contracts to the real world, allowing interactions to go beyond the blockchains. Without oracles, smart contracts are limited to just processing what\u2019s already on-chain, missing out on essential data like price feeds, real-world events, or even web APIs.\n\n\nIn this article, we\u2019ll explore blockchain oracles and their types in detail: why they\u2019re game-changers, their applications, and their potential weak spots. Keep reading till the end! We\u2019ve got some cool bonus waiting for you.\u00a0\n\n\nWhat\u2019s A Blockchain Oracle, Again?\n\n\nA blockchain oracle is a service that provides external data to smart contracts, enabling them not only to fetch data from other blockchains but also from the outside or off-chain world: sports events, banking data, and much more.\u00a0\n\n\nThe Need For Oracles In Smart Contracts\n\n\n\n\nSmart contracts are inherently isolated and deterministic; they cannot access or retrieve data from external environments without an intermediary. The oracle serves as this intermediary, bridging the gap between off-chain and on-chain data sources.\n\n\nIn other words, oracles are the blockchain\u2019s gateway to the real world.\u00a0\n\n\nStill not sure about oracles\u2019 role? For a better understanding, we provided you with a real-world scenario:\u00a0\n\n\nLet\u2019s assume we have an Ethereum smart contract created to bet on the price of the gold. Both players deposit their bets into the smart contract. What does a smart contract need to have to distribute the prize when the period is over? It needs to have the actual price of the gold. This is when oracles come in handy. Oracles can fetch accurate prices off-chain and deliver them to the blockchain securely and reliably.\n\n\nHow Blockchain Oracles Work\u00a0\n\n\nUsers (smart contracts) request and get some information from an external source (any data not stored on the blockchain). According to ethereum.org, here\u2019s an outline of how it works:\n\n\n\n\nData request:\n User sends a data request. Each request depends on the nature of the application, but generally, it specifies the desired data and sources as well as how to process and aggregate responses into a single value.\n\n\nData request goes to an oracle contract: \nThe on-chain oracle contract is the powerhouse that receives data requests, passes them on to off-chain oracle nodes, and returns data to smart contracts. Everything is governed by a smart contract, so we cannot overstate the importance of \nauditing\n the code to ensure it works as intended.\n\n\nOracle contract produces a log event that is picked up by an oracle node\n. This is how the on-chain oracle interacts with the off-chain node. The \u2018eth_subscribe\u2019 command is the most common method used in JSON-RPC to create a subscription to certain events on the Ethereum network. A similar method is used in other blockchain networks.\n\n\nOracle node captures a log event and initiates the off-chain task\n. The node dispatches an HTTP GET request (or any other API call method) to third-party services. Once data is retrieved, it\u2019s processed, reformatted into a blockchain-compatible format, and then submitted back on-chain via a transaction to the oracle contract. Everything happens off-chain as information transfers are not bound by gas expenses, block dimensions, or other on-chain constraints.\n\n\n\n\nRegarding the distinction between data sources and oracles: oracles are not the sources of data; they are the means by which smart contracts access the data.\n\n\nTypes Of Blockchain Oracles\u00a0\n\n\nOracles serve different purposes, hence they come in different design and administration patterns. According to the classification by \nethereum.org\n, the most popular design pattern is \nrequest-response\n because it allows smart contracts to query specific information rather than an entire dataset. By contrast, \npublish-subscribe\n is useful for fetching dynamic changes, i.e., fiat-to-crypto exchange rates. Another important classification relates to administration. It answers the question: Who controls the oracle: a single entity or multiple peers?\u00a0\u00a0\n\n\nBased On Network Administration (Trust Model)\u00a0\n\n\nCentralized Oracles:\n\n\n\n\nOperate under a single entity\u2019s control.\n\n\nEfficiently gather off-chain data and update the oracle contract based on requests.\n\n\nPrime application emerges when specialized datasets are made available.\n\n\nDrawbacks include low correctness guarantees, poor availability, and potentially poor incentive compatibility.\n\n\n\n\nDecentralized Oracles:\n\n\n\n\nIntend to mitigate centralized oracles\u2019 shortcomings by removing single-point failures.\n\n\nMultiple entities in a P2P framework achieve consensus on off-chain data before transferring it on-chain.\n\n\nBenefits include high correctness guarantees through multiple strategies, continuous data availability, and good incentive compatibility.\n\n\n\n\nBased On Oracle Design Patterns\n\n\nImmediate-Read Oracles:\n\n\n\n\nProvide data immediately upon request.\n\n\nOften used for data that is static or changes infrequently.\n\n\n\n\nPublish-Subscribe Oracles:\n\n\n\n\nExpose a continuously updated \u201cdata feed\u201d for smart contracts to access.\n\n\nData is dynamic, necessitating client contracts to monitor for alterations.\n\n\nAn example is an oracle offering real-time ETH-USD conversion rates.\n\n\n\n\nRequest-Response Oracles\n:\n\n\n\n\nPermit smart contracts to demand specific data beyond the scope of publish-subscribe oracles.\n\n\nOptimal for scenarios where: (1) the complete dataset is extensive for on-chain storage, or (2) users require only data fragments sporadically.\n\n\nThey encompass an on-chain component receiving data requests, subsequently delegated to an off-chain node for processing.\n\n\nRequesting users bear the expense of off-chain data retrieval.\n\n\nThe invoking contract must allocate funds to offset the gas expenses during the oracle\u2019s response phase.\n\n\n\n\nInteroperability Solutions vs. Oracles\n\n\nInteroperability solutions\n range from sidechains to blockchain-agnostic protocols. However, they come with all sorts of challenges, like consistency and requirements for code changes. By contrast, oracles offer compatibility and security across different blockchains. We\u2019ve summarized key points of difference in the table below:\n\n\nInteroperability Solutions\nOracles\nSidechains\nSidechain logic can be invalidated if the main-chain is compromised. Ensuring consistency is challenging.\nOracles don\u2019t require compatibility between blockchains and have multiple security management ways.\nNotaries\nNotaries cover the full spectrum of interoperability but centralize trust.\nOracles can address some \nblockchain vulnerabilities\n through decentralized solutions.\nHTLCS\nHTLCs are trustless and adaptable for trades but may lead to asset lockup. Supports only digital asset exchange.\nOracles support both digital and arbitrary data.\nBOB\nBlockchain engines don\u2019t communicate globally. Some solutions are centralized with necessary transaction fees.\nDecentralized Oracles can overcome many of these limitations.\nTrusted Relays\nConnecting differing blockchain platforms is tough. Minimizing malicious relay services is unclear.\nOracles act as middleware providing off-chain data and have reputation systems.\nSource: \u201c\nBlockchain Oracles: State-of-the-Art and Research Directions\n\u201d (Ezzat et al., 2022)\n\n\nBlockchain Oracle Use Cases And Applications\n\n\nOracles bridge the gap between on-chain and off-chain worlds by retrieving and validating external data for smart contracts.\n\n\nFinancial Data Retrieval for DeFi Applications\n\n\nPeer-to-peer lending, borrowing, and asset trading in DeFi require real-time financial data, such as exchange rates and capital markets data. For instance, a DeFi lending protocol would need current market prices for assets deposited as collateral.\n\n\nOracle Examples\n:\n\n\n\n\nChainlink: Provides tamper-proof inputs, outputs, and computations for advanced smart contracts across blockchains.\n\n\nUMA Oracle: Allows smart contracts to receive diverse data for various applications.\n\n\nBand Protocol: Connects real-world data and APIs to smart contracts.\n\n\n\n\nGenerating Verifiable Randomness for Blockchain Applications\n\n\nBlockchain-based games or lotteries need unpredictable randomness, a challenge due to the deterministic nature of blockchains.\n\n\nOracle Examples\n: Chainlink VRF and API3 QRNG offer tamper-proof random number generation (RNG), ensuring fairness and unpredictability.\n\n\nRetrieving Real-World Event Outcomes\n\n\nAllows smart contracts to respond to real-world events. Decentralized insurance applications might utilize oracles to access accurate weather data or disaster reports.\n\n\nOracle Examples\n:\n\n\n\n\nWitnet: A decentralized oracle that helps smart contracts respond to real-world events.\n\n\nPyth Network: Publishes real-world financial data on-chain.\n\n\n\n\nAutomating Smart Contract Execution\n\n\nAutomates functions within a contract to maintain application functionality. Chainlink\u2019s Keeper Network allows smart contracts to outsource maintenance tasks in a decentralized way.\n\n\nMajor Problem With Oracles: Market Manipulation\n\n\nOracles play a pivotal role in the decentralized finance ecosystem, serving as the bridge between external data sources and smart contracts; however, their critical function also makes them a prime target for market manipulation tactics.\n\n\nMarket manipulation is the intentional distortion of price for profit, at the expense of other users. The easier an asset is to trade (its liquidity), the harder it is for someone to mess with its price.\n\n\nCommon Techniques in Market Manipulation:\n\n\n\n\nSpoofing: \nPosting numerous trade orders without intending to execute them, often using bots.\n\n\nRamping: \nArtificially increasing an asset\u2019s market price to drive demand.\n\n\nBear Raid: \nDeliberate attempts to lower an asset\u2019s market price through heavy sales or short sales.\n\n\nCross-market Manipulation: \nTrading in one environment to manipulate prices in another, profiting from the price divergence.\n\n\nWash Trading: \nSimultaneously buying and selling an asset to feign a high trade volume.\n\n\nFrontrunning: \nTrading based on privileged information before the market can respond. In crypto, this is part of \nMaximum Extractable Value (MEV)\n.\n\n\n\n\nAre Blockchain Oracles Secure?\n\n\nWhile many popular oracles are thoroughly vetted and audited, protocols that use them can still mess things up. A notable example is a critical vulnerability in the \nAaveV3 fallback oracle\n, where the \u2018setAssetPrice\u2019 function lacked essential access control, allowing hackers to set any asset\u2019s price.\n\n\nAt the time of bug discovery (April 2022), Aave was worth nearly $3 billion, so you can imagine the magnitude of a potential hack. The worst-case scenario was averted as third-party researchers spotted the issue and reported it to Aave. These incidents underscore the importance of \nexternal code reviews\n, even when a project uses a battle-tested oracle.\n\n\n\n\nBut not all stories have a happy ending. See oracle attacks where projects lost millions:\n\n\n\n\nLet\u2019s review the most common attack vectors.\n\n\nPrice Oracle Manipulation\n\n\nIn this type of attack, the objective is to deceive smart contracts by providing false price data. Consider the first hack of Inverse Finance to give you a real-world scenario. A big shout out to the authors of the great REKT \narticle\n.\n\n\nA well-planned and executed hack lets a hacker influence the price of the INV token and receive a special offer from the Ethereum-driven lending protocol. The exploiter initially withdrew 901 ETH from Tornado Cash. Once they distributed 1.5 ETH to 241 clean addresses using Disperse, the attacker launched 5 different smart contracts when only one of them was real. Then, they swapped 500 ETH to 1.7k INV via the INV-WETH pair on SushiSwap, significantly changing the price due to low liquidity. Simultaneously, the exploiter began spamming transactions to be the first to enter the next block and get an inflated price from Sushiswap. But why do we mention Inverse Finance here? Unfortunately, the Sushiswap TWAP oracle was used by Inverse Finance through the Keeper Network, which resulted in the price of INV to be drastically increased. Finally, the attacker deposited their 1.7k INV, which should have cost $644k at that time, as collateral and borrowed $15.6M for good.\n\n\nA lesson here? We shouldn\u2019t rely upon a TWAP oracle generated from a single low liquidity DEX trading pair with a short-time sample, aggregating the market manipulation risks.\n\n\nFlash Loan Attacks\n\n\nThis type of attack is interconnected with the previous one since flash loans can be considered a tool to achieve price changes. In the flash loan attack, an exploiter borrows a large amount of funds through a flash loan and uses those funds to manipulate the price of an asset.\n\n\nA \nflash loan attack\n is a type of exploit that takes advantage of the fact that flash loans are uncollateralized and do not require a credit check. In a flash loan attack, a hacker borrows a large amount of funds through a flash loan and uses those funds to manipulate the price of an asset on a DeFi platform.\n\n\nIt typically follows three \nsteps\n:\n\n\n\n\nBorrowing: The attacker initiates a flash loan by borrowing a significant amount of cryptocurrency from a DeFi platform that supports flash loans.\n\n\nExecution: The attacker may use the borrowed funds to execute large buy or sell orders on decentralized exchanges, creating artificial price movements to their advantage.\n\n\nRepayment: At the end of the transaction, the attacker repays the flash loan, returning the borrowed funds and any fees.\n\n\n\n\n\n\nSecurity Recommendations From Hacken Team\n\n\n\n\nEnsure that the price sources of all tokens cannot be manipulated.\n\n\nUse the Chainlink oracle. They are more manipulation-resistant, provide highly accurate and fresh data, and have a wider market coverage as opposed to the TWAP (Time-weighted average price) algorithms.\n\n\nWhen the Chainlink oracle is not available, TWAP oracles can be used. (it cannot always be considered a right decision). Here is an excellent \ncomparison\n between both approaches created by the Chainlink team.\n\n\nSet up monitoring tools to detect and alert anomalous on-chain activity, allowing quick interventions. Our company offers such a service, so don\u2019t hesitate to contact the \nExtractor\n team.\n\n\n\n\nProtect your Web3 projects from potential threats with \nsmart contract auditing\n.\nMitigate vulnerabilities in your smart contract and improve its functionality with a double line-to-line code analysis and a separate review by a lead smart contract auditor.\nRequest a quote\n\n\n\n\n\n\nWe couldn\u2019t forget about our dear blockchain enthusiasts, so we curated a selection of insightful articles that will drastically boost your expertise:\n\n\nFollow @hackenclub on  (Twitter)\n\n"
    }
}