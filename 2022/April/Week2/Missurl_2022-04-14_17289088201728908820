{
    "threat_intelligence": {
        "url": "https://blog.ethereum.org/2022/04/14/secured-no-3",
        "timestamp": "2022-04-14 00:00:00",
        "original_content": "Over the past year, the Ethereum Foundation has significantly grown its team of dedicated security researchers and engineers. Members have joined from a variety of backgrounds ranging from cryptography, security architecture, risk management, exploit development as well as having worked on red and blue teams. The members come from different fields and have worked on securing everything from the internet services we all depend on each day, to national healthcare systems and central banks.\n\n\nAs The Merge approaches, a lot of effort from the team is spent analyzing, auditing and researching the Consensus Layer in various ways as well as The Merge itself. A sample of the work is found below.\n\n\nClient Implementation Audits \n\n\nTeam members audit the various client implementations with a variety of tools and techniques.\n\n\nAutomated Scans \n\n\nAutomated scans for codebases aim to catch low hanging fruit such as dependency vulnerabilities (and potential vulnerabilities) or improvement areas in code. Some of the tools being used for static analysis are CodeQL, semgrep, ErrorProne and Nosy.\n\n\nAs there are many different languages used between the clients, we use both generic and language specific scanners for the codebases and images. These are interconnected through a system that analyzes and reports new findings from all tools into relevant channels. These automated scans make it possible to quickly get reports about issues that potential adversaries are likely to easily find, thus increasing the chance of fixing issues before they can be exploited.\n\n\nManual Audits \n\n\nManual audits of components of the stack are also an important technique. These efforts include auditing critical shared dependencies (BLS), libp2p, new functionality in hardforks (eg. sync committees in Altair), a thorough audit into a specific client implementation, or auditing L2s and bridges.\n\n\nAdditionally, when vulnerabilities are reported via the \nEthereum Bug Bounty Program\n, researchers can cross-check issues against all clients to see if they are also affected by the reported issue.\n\n\nThird Party Audits \u200d\n\n\nAt times, third party firms are engaged to audit various components. Third party audits are used to get external eyes on new clients, updated protocol specifications, upcoming network upgrades, or anything else deemed high-value.\n\n\nDuring third party audits, software developers and our team's security researchers collaborate with the auditors to educate and assist throughout.\n\n\nFuzzing \n\n\nThere are many ongoing fuzzing efforts led by our security researchers, members of client teams, as well as contributors in the ecosystem. The majority of tooling is open source and runs on dedicated infrastructure. The fuzzers target critical attack surfaces such as RPC handlers, state transition and fork-choice implementations, etc. Additional efforts include Nosy Neighbor (AST based auto fuzz harness generation) which is CI based and built off of the Go Parser library.\n\n\nNetwork level simulation and testing \n\n\nOur team's security researchers build and utilize tools to simulate, test, and attack controlled network environmets. These tools can quickly spin up local and external testnets (\"attacknets\") running under various configurations to test exotic scenarios that clients must be hardened against (eg. DDOS, peer segregation, network degradation).\n\n\nAttacknets provide an efficient and safe environment to quickly test different ideas/attacks in a private setting. Private attacknets cannot be monitored by potential adversaries and allow us to break things without disrupting the user experience of public testnets. In these environments, we regularly utilize disruptive techniques such as thread pausing and network partitioning to further expand the scenarios.\n\n\nClient and Infrastucture Diversity Research \n\n\nClient and infrastructure diversity\n has received a lot of attention from the community. We have tools in place to monitor the diversity from a client, OS, ISP and crawler statistics. Additionally we analyze network participation rates, attestation timing anomalies and general network health. This information is \nshared\n across \nmultiple\n locations to highlight any potential risks.\n\n\nBug Bounty Program \n\n\nThe EF currently hosts two bug bounty programs; one targeting the \nExecution Layer\n and another targeting the \nConsensus Layer\n. Members of the security team monitor incoming reports, work to verify their accuracy and impact, and then cross-check any issues against other clients. Recently, we published a disclosure of all \npreviously reported vulnerabilities\n.\n\n\nSoon, these two programs will be merged into one, the general platform will be improved, and additional rewards will be provided for bounty hunters. Stay tuned for more information on this soon!\n\n\nOperational Security \n\n\nOperational Security encompasses many efforts at the EF. For example, asset monitoring has been setup which continually monitor infrastructure and domains for known vulnerabilities.\n\n\nEthereum Network Monitoring \n\n\nA new Ethereum network monitoring system is being developed. This system works similar to a \nSIEM\n and is built to listen to and monitor the Ethereum network for pre-configured detection rules as well as dynamic anomaly detection that scans for outlier events. Once in place, this system will provide early warnings about network disruptions in progress or coming up.\n\n\nThreat Analysis \n\n\nOur team conducted a threat analysis focuse on The Merge to identify areas that can improved with respect to security. Within this work, we collected and audited security practices for Code Reviews, Infrastructure Security, Developer Security, Build Security (DAST, SCA and SAST built into CI, etc.), Repository Security, and more from the client teams. Additionally this analysis surveyed how to prevent misinformation, from which disasters may strike, and how the community might recover in various scenrios. Some efforts related to disaster recovery exercises are also of interest.\n\n\nEthereum Client Security Group \n\n\nAs The Merge approaches, we formed a security group that consists of members of client teams working on both the Execution Layer and the Consensus Layer. This group will meet regularly to discuss matters related to security such as vulnerabilities, incidents, best practices, on-going security work, suggestions, etc.\n\n\nIncident Response \n\n\nBlue Team efforts help bridge the gap between the Execution Layer and the Consensus Layer as The Merge moves closer. War rooms for incident response has worked well in the past where chats would spring up with relevant people during incidents, but with The Merge comes new complexity. Further work is being done to (for example) share tooling, create additional debug and triage capabilities and create documentation.\n\n\nThank you and get involved \n\n\nThese are some of the efforts currently taking place in various forms, and we're looking forward to share even more with you in the future!\n\n\nIf you think you\u2019ve found a security vulnerability or any bug, please submit a bug report to the \nexecution layer\n or \nconsensus layer\n bug bounty programs! "
    }
}