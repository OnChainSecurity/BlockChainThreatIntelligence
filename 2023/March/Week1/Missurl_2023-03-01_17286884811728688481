{
    "threat_intelligence": {
        "url": "https://hacken.io/discover/flash-loan-attacks/",
        "timestamp": "2023-03-01 00:00:00",
        "original_content": "\n\nFlash loans have become an increasingly popular feature in decentralized finance (DeFi) ecosystems, offering individuals and businesses quick access to large amounts of capital without collateral. With flash loans, borrowers can receive funds that are immediately returned to the lending platform at the end of a single transaction block.\n\n\nHowever, the ease of access to these loans has also led to an increase in flash loan attacks, which are a type of exploit where malicious actors can take advantage of the temporary liquidity provided by flash loans to manipulate prices or steal funds. These attacks can have devastating consequences for both individuals and DeFi platforms, causing millions of dollars in losses.\n\n\nIn this article, we will explore the risks associated with flash loan attacks and provide actionable steps that developers and entrepreneurs can take to protect themselves and their users. We will examine real-world examples of flash loan attacks and discuss how these attacks can be prevented through improved security measures and best practices.\n\n\nHow Do Flash Loan Attacks Work?\n\n\nFlash loan attacks rely on the temporary liquidity provided by flash loans to manipulate the price of a cryptocurrency, exploit \nvulnerabilities\n in a DeFi smart contract, or steal funds from a protocol.\n\n\nTo execute a flash loan attack, an attacker typically follows a three-step process:\n\n\n\n\nBorrowing\n: The attacker takes out a flash loan from a DeFi platform and borrows a large sum of cryptocurrency without providing any collateral.\n\n\n\n\n\n\nManipulating\n: Using the borrowed funds, the attacker manipulates the price of a targeted cryptocurrency or exploits a vulnerability in a DeFi smart contract.\n\n\n\n\n\n\nRepaying\n: The attacker repays the flash loan, usually within the same transaction block, and returns the borrowed funds to the lending platform.\n\n\n\n\n\n\nThe key to the success of a flash loan attack is the ability to repay the loan within the same transaction block. This allows the attacker to take advantage of temporary liquidity without providing any collateral, which makes it difficult for lending platforms to protect themselves against these types of attacks.\n\n\n\n\nSimple Flash Loan Example\n\n\n\n\nLet\u2019s say an attacker wants to exploit a vulnerability in a DeFi smart contract to steal funds. The attacker first takes out a flash loan of 1000 ETH (worth around $1.8 million at the time of writing) from a lending platform. The attacker then uses 500 ETH to buy a cryptocurrency that is undervalued on one exchange and overvalued on another exchange.\n\n\nFor example, let\u2019s say that the cryptocurrency XYZ is undervalued on exchange A, where it is trading at 1 ETH = 10 XYZ, and overvalued on exchange B, where it is trading at 1 ETH = 12 XYZ. The attacker uses the 500 ETH to buy 5000 XYZ on exchange A, where it is undervalued, and then immediately sells the 5000 XYZ on exchange B, where it is overvalued, for 600 ETH.\n\n\nNow the attacker has 1100 ETH: the original 500 ETH plus the 600 ETH profit from the arbitrage trade. The attacker repays the flash loan of 1000 ETH, plus any fees and interest, and keeps the remaining 100 ETH profit.\n\n\nThis is an example of a flash loan arbitrage attack. This attack takes advantage of price discrepancies between different exchanges to generate profit. Arbitrage is not inherently malicious; many traders use flash loans for legitimate purposes. However, it becomes malicious when used to steal funds from the protocol by exacerbating a vulnerability in a DeFi Smart contract.\n\n\n\n\n\n\nFlash Loan Attack Types\n\n\nIt\u2019s worth noting that this is just one example. A real-world flash loan attack could take many different forms depending on the specific vulnerability or manipulation tactic being used.\n\n\nPrice manipulation\n: Attackers can use flash loans to manipulate the price of a cryptocurrency by artificially inflating or deflating its value. This can cause significant losses for traders who have placed orders based on manipulated prices.\n\n\nArbitrage\n: Attackers can exploit price discrepancies between separate decentralized exchanges (DEXs) by using flash loans to execute arbitrage trades. While this attack is not necessarily malicious, it can still cause losses for legitimate traders.\n\n\nSmart contract exploits\n: Attackers can use flash loans to take advantage of vulnerabilities in DeFi smart contracts, such as \nreentrancy bugs\n or integer overflow errors. This can allow them to steal funds from the protocol or execute other attacks.\nIt\u2019s essential to highlight that flash loans, in most cases, are not vulnerabilities in and of themselves. Attackers leverage them to quickly acquire substantial sums of money, which can consequently cause significant alterations to the impacted systems.\n\n\nReal-World Cases Of Flash Loan Attacks\n\n\nEuler Finance: $197m (March 2023)\n\n\nOne of the latest and, at the same time, the \nbiggest hacks\n. The hacker exploited an error in the rate calculation within the platform itself.\nVulnerability explanation:\n Euler Finance platform users borrow and lend using two main types of tokens: \neTokens \n(representing collateral) and \ndTokens \n(representing debt). A hacker exploited a flaw in the platform\u2019s \neToken \nfunction, which caused an incorrect conversion of borrowed assets to collateralized assets. The hacker involved two primary on-chain entities: a \nfront-running\n bot and their personal wallet. They received initial funding from Tornado Cash, a sanctioned mixer, for gas fees and to create the necessary contracts.\n\n\nAttack explanation:\n The hacker took a flash loan of about $30 million in DAI from the DeFi protocol Aave. They deposited $20 million of the DAI into Euler\u2019s platform and received a similar amount in eDAI tokens. By leveraging the platform\u2019s borrowing capabilities, the hacker borrowed 10 times the original deposited amount. They used the remaining $10 million in DAI to repay part of the acquired debt and continued borrowing until the flash loan was closed.\nConclusion: \nAs a result of the attack, \nEuler lost around $197 million\n worth of cryptocurrency across DAI, wBTC, stETH, and USDC. Euler\u2019s native token, EUL, also experienced a decline of more than 45%.\nP.S.\n Not long after the attack, the hacker restored the funds to the platform.\n\n\nCream Finance: $130m (October 2021)\n\n\nIn October 2021, CREAM Finance suffered one of the largest\u00a0 DeFi hacks in history, with losses exceeding $130 million.\nVulnerability explanation:\n The vulnerability exploited in this attack was related to CREAM\u2019s \nyUSDVault\n. The attacker\u2019s goal was to mint a significant number of \ncrYUSD \ntokens and exploit a flaw in the vault to double the perceived value of these shares.\n\n\nAttack explanation:\n During the attack, two accounts took out flash loans from MakerDAO and AAVE. The \nDAI \nfrom MakerDAO was deposited into Curve\u2019s yPool to create \nyDAI\n, which was used to mint \nyUSD\n. The \nETH \nfrom AAVE served as collateral to borrow additional\n \nyUSD. The second address transferred approximately $500 million in \nyUSDVault \ntokens to the first address.\n\n\nRepeating this process multiple times, the first address accumulated roughly $1.5 billion in \ncrYUSD \nand $500 million in yUSDVault. The attacker redeemed the $500 million \nyUSDVault \nfor \nyUSD\n, reducing the total supply of yUSDVault tokens in the vault to around $8 million. The attacker then deposited approximately $8 million in \nyUSD \ninto the vault, effectively doubling its overall value.\n\n\nCREAM\u2019s PriceOracleProxy for \nyUSDVault \ntokens determined their value by dividing the vault\u2019s total value by the total supply of \nyUSDVault \ntokens. By reducing the total supply of \nyUSDVault \nto around $8 million and depositing $8 million in \nyUSD \ninto the vault, the attacker essentially doubled the perceived value of\n yUSDVault \nshares (\ncrYUSD\n).\n\n\nConclusion: \nThe first attacker address possessed $1.5 billion in \ncrYUSD\n, which the vault now valued at $3 billion. The attacker used $2 billion and the previously withdrawn $500 million to repay their flash loans. The remaining $1 billion in \ncrYUSD \nallowed the attacker to drain CREAM\u2019s $130 million in available assets.\n\n\nbZx: $1m (November 2021)\n\n\nThe hack was quite sophisticated, involving two distinct attacks. After targeting the first vulnerability, the hacker swiftly executed a second attack using a different method.\nVulnerability explanation:\n The core vulnerability in the first attack was BZx\u2019s reliance on a single oracle for price determination, which allowed the attacker to manipulate the collateral pool using a flash loan. In the second attack, the vulnerability was BZx\u2019s usage of the Uniswap spot price as an oracle, which was manipulated to inflate the value of the collateral.\nAttack explanation:\n In the first attack, the hacker borrowed $10 million in \nETH \nthrough a flash loan and used it to manipulate the collateral pool by taking a 5x short position on the \nETH-wBTC\n trading pair, causing significant slippage. In the second attack, the attacker used a flash loan to inflate the Uniswap \nSynthetix \nUSD price to $2, then deposited \nsUSD \ninto \nBZx \nas collateral to borrow more ETH than they should have been allowed.\nConclusion: \nThese attacks on BZx exposed the platform\u2019s vulnerabilities, particularly its reliance on a single oracle and the susceptibility of its collateral pool to manipulation. The attacks resulted in losses of over $985K, highlighting the need for robust security measures and the importance of using multiple trusted oracles for price determination.\n\n\nHow To Prevent Flash Loan Attacks?\n\n\nConsidering the earlier examples, we can compile a list of key methods to safeguard against flash loan attacks.\n\n\n\n\nUse reentrancy guards to prevent unexpected contract calls. Use proper access control mechanisms, such as OpenZeppelin\u2019s Ownable, to limit critical functions. Use well-tested libraries and frameworks like OpenZeppelin for contract development.\n\n\nAs these attacks originate from external smart contracts, it\u2019s prudent to validate the addresses allowed to utilize flash loan functionalities. Ensure that external contract calls are authentic and secure and limit interactions exclusively to trusted contracts.\n\n\nEmploying thorough \nthird-party smart contract auditing\n and validation is always a valuable security measure. Conduct comprehensive testing to identify potential vulnerabilities and collaborate with reputable auditing firms to review your contracts.\n\n\nUtilize a variety of oracles to obtain the most precise and safe price information, considering that some \noracles\n might be vulnerable. Implement time-weighted average price (TWAP) mechanisms to minimize the risks tied to price manipulation.\n\n\nRegularly review and stay current with \nDeFi security\n best practices and vulnerability reports.\n\n\n\n\nMitigate weaknesses in your smart contract and improve its functionality with a double line-to-line code analysis and a separate review by a lead auditor.\nRequest a quote\n\n\nFinal Thoughts\n\n\nFlash loan attacks are a significant threat to DeFi protocols, as they can allow attackers to exploit vulnerabilities in smart contracts and steal funds. However, by implementing best practices such as reentrancy guards, access control mechanisms, and third-party auditing, developers and entrepreneurs can mitigate the risks of theft.\n\n\nIt\u2019s also important to stay current with the latest security best practices and vulnerability reports, as the DeFi landscape is constantly evolving. By remaining vigilant and proactive in addressing potential threats, we can help to build a safer and more secure decentralized financial system for everyone.\n\n"
    }
}