{
    "threat_intelligence": {
        "url": "https://www.cyfrin.io/blog/price-oracle-manipulation-attacks-with-examples",
        "timestamp": "2023-04-01 00:00:00",
        "original_content": "In 2022, over $403.2 million were stolen in DeFi as a result of over 40 price oracle manipulation attacks.\nAs one of the most common types of attacks in the crypto space together with signature replay attacks, understanding oracle manipulations and how they occur is crucial to \nbeing a better engineer and smart contract auditor\n.\n\u200d\ntotal value loss in DeFi due to price oracle manipulation attacks\n\u200d\nBut first, what is a blockchain oracle?\nIf this is your first time hearing about oracles, you should checkout our \nsmart contract development and auditing courses\n on Cyfrin Updraft, completely for free.\nIn the internet world, anyone can host a website and a server, similar to how anyone can host a node on the blockchain network. However, nodes and servers are not connected to each other; blockchains are closed systems unable to reach the internet\u2019s data.\nUntil oracles. \nBlockchain oracles connected to the blockchain\nIn the world of blockchains, an oracle serves as a bridge to external systems, such as APIs or other on-chain data. \nOracles enable smart contracts to execute actions based on inputs and outputs from the real world or from other smart contracts and chains.\nData is brought into blockchains from external sources through oracles - whose job is to update and expose data so that smart contracts can use the information as triggers to execute blockchain transactions. A type of smart contract themselves, oracles are key to connecting the wider internet and smart contracts across chains.\nOracles and DeFi Protocols\nThis connection to the real world is particularly important for DeFi protocols, who rely on the on-chain price of an asset in order to function. In DeFi protocols (decentralized finance) specifically, you can imagine any device that delivers the price of an asset (for example, ETH, USD, or BTC) to be considered an oracle.\nFor example, DeFi protocols might require to know when to liquidate a user\u2019s loan. This decision often comes from pricing information fetched from oracles, as they expose the asset's value so that contracts can build on top of it.\nSome examples of oracles are: \nChainlink\n, \nTellor\n, or \nUniswap\n. \nNote:\n Those familiar with Uniswap might be puzzled that Uniswap is on the list. Isn't Uniswap a DEX (decentralized exchange)? Well, DEXes (and other on-chain protocols with liquidity pools) are often treated as oracles, since you can derive the price of an asset based on the ratio of liquidity pools. Uniswap in particular has an extension called \"TWAP\" (time-weighted average) which is resistant to flash loans, but the price value is inherently lagging and may be more inaccurate. Hint hint though - using liquidity pools as oracles is one of the most common ways to set yourself up for an oracle manipulation attack.\nHerein lies the issue.\n\u200d\nOracles and Oracle Price Manipulation Attacks\nOracle manipulation attacks happen when an oracle\u2019s price feed is artificially altered.\nThis manipulation can dramatically affect behavior within DeFi protocols that rely on that oracle for their internal logic. These alterations can create arbitrage opportunities that wouldn't otherwise exist.\nTake this example:\nAn attacker manipulates the price of ETH in a liquidity pool.\nThis manipulated pool is then used by an oracle to determine the value of ETH.\nA DeFi protocol uses this erroneous ETH value to decide when to liquidate a loan.\nThe result? The loan is liquidated earlier than it should be, netting the attacker a tidy profit.\nOracle manipulation attacks occur when we manipulate the information the oracle is sending to the blockchain, thereby impacting the action being executed on-chain to the benefit of the manipulator.\n\u200d\nHere is an example of an oracle manipulation attack in code\n.\n\u200d\nHow does Oracle Price Manipulation Attacks Work?\nMost oracle price manipulation attacks occur through the use of Flash Loans.\nFlash loans are a DeFi mechanism which allow users to borrow assets without the need for collateral.\nThe catch? The funds must be returned to the lender within the same transaction block or the whole operation gets reverted.\nAttackers can exploit Flash Loans to alter the price of assets in automated market makers such as Uniswap, changing the spot price of a token before the lender smart contract has a chance to look up the token again.\nAs all of this happens within the same transaction block, compromised liquidity pools end up distorting the price oracles, which in turn manipulates behavior in a given protocol.\n\u200d\nExamples of Oracle Price Manipulation Attacks\nLast year, \nMango Markets\n, an online exchange for cryptocurrencies, was attacked through oracle manipulation. $117 million in digital money was taken. \nHere's how it happened:\nAvraham Eisenberg, the attacker, began with $10 million USDC in two different Mango Markets accounts.\nHe used one account to sell a lot of MNGO (Mango's own currency) while his other account bought the same amount.\nHis buying artificially pushed the price of MNGO up quickly on the Mango Markets protocol. \nThe account he used to buy MNGO went from $10M total value to over $400M thanks to the artificially inflated price!\nWith such a high account value, Eisenberg used his MNGO tokens (now worth $400M) as collateral to borrow another token, taking up almost all of Mango Markets' assets since the collateral (MNGO) wasn\u2019t actually worth that amount in the market. This caused the price of MNGO to drop, but it was already too late.. Eisenberg had taken all valuable assets!\n\u200d\nIf we were to implement an attack like this in Solidity, it would look something like:\n \n\t\n\npragma\n \nsolidity\n ^0.8.0;\n\n\nimport\n \n'MarketManipulator.sol'\n\n\ncontract\n \nOracleAttack\n {\n\u00a0\u00a0\u00a0\u00a0\nIDeFiTradingPlatform\n \npublic\n \ntradingPlatform\n;\n\u00a0\u00a0\u00a0\u00a0IOracle \npublic\n priceOracle;\n\u00a0\u00a0\u00a0\u00a0IDeFiLendingPlatform \npublic\n lendingPlatform;\nMarketManipulator \npublic\n marketManipulator;\n\u00a0\u00a0\u00a0\u00a0\nconstructor\n(\naddress\n _tradingPlatform, \naddress\n _priceOracle, \naddress\n _lendingPlatform\n) \n{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tradingPlatform \n=\n IDeFiTradingPlatform(_tradingPlatform);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0priceOracle \n=\n IOracle(_priceOracle);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lendingPlatform \n=\n IDeFiLendingPlatform(_lendingPlatform);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\nfunction\n \nmanipulateMarket\n(\n) \nexternal\n \n{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nmarketManipulator.manipulateMarket();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\nfunction\n \nexploitOracle\n(\n) \nexternal\n \n{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nuint256\n manipulatedPrice \n=\n priceOracle.getPriceOfToken();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lendingPlatform.borrowFunds(manipulatedPrice);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\nfunction\n \nwithdrawFunds\n(\n) \nexternal\n \n{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lendingPlatform.withdrawBorrowedFunds();\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\nIn this scenario, we may visualize a \nmanipulateMarket\n function exchanging ETH for the MANGO token in the following way:\n \n\n\npragma\n \nsolidity\n ^0.8.0;\n\n\n\ninterface\n \nIUniswapV2Router\n \n{\n    \nfunction\n \nswapExactETHForTokens\n(\n\n        \nuint\n amountOutMin,\n        \naddress\n[] \ncalldata\n path,\n        \naddress\n to,\n        \nuint\n deadline\n    \n) \nexternal\n \npayable\n \nreturns\n (\nuint\n[] \nmemory\n amounts\n)\n;\n}\n\n\ncontract\n \nMarketManipulator\n \n{\n    IUniswapV2Router \npublic\n uniswapRouter;\n    \naddress\n \npublic\n mangoTokenAddress;\n\n    \n    \nconstructor\n(\naddress\n _uniswapRouter, \naddress\n _mangoTokenAddress\n) \n{\n        uniswapRouter \n=\n IUniswapV2Router(_uniswapRouter);\n        mangoTokenAddress \n=\n _mangoTokenAddress;\n    }\n\n    \n    \nfunction\n \nmanipulateMarket\n(\n) \nexternal\n \npayable\n \n{\n        \naddress\n[] \nmemory\n path \n=\n \nnew\n \naddress\n[](\n2\n);\n        path[\n0\n] \n=\n uniswapRouter.WETH(); \n        path[\n1\n] \n=\n mangoTokenAddress;\n\n        \n        uniswapRouter.swapExactETHForTokens{\nvalue\n: \nmsg\n.\nvalue\n}(\n            \n0\n, \n            path,\n            \nmsg\n.\nsender\n, \n            \nblock\n.\ntimestamp\n \n        );\n    }\n}\n\n\n\nThings to keep in mind\nIn this case, the attacker, Avraham Eisenberg, openly confirmed he was behind the oracle price manipulation attack, arguing that none of it was illegal.\n\u200d\n\u200d\n \nHowever, the \nSEC filed a charge\n arguing that Eisenberg's actions might count as market manipulation since he inflated MNGO's trading volume by 2,000% on the day of the exploit, compared to the average price over the previous ten days. The case is still open, and no legal conclusion has been reached on this topic as of yet.\nOn the attack itself, it\u2019s interesting to keep in mind that the attack here is not to the specific code, but rather to the source of truth, the oracle, which in turn manipulates the protocol\u2019s behavior. The code is in fact working as expected.\nIn the Mango Markets incident, for example, the Mango Markets protocol was leveraging centralized exchanges like FTX as their oracle to define the collateral valuation for its loans.\nHow likely a protocol is to be exploited by an Oracle Manipulation Attack is directly correlated with the type of oracle they are using: \nProtocols using a liquidity pool as their oracle are essentially 99.9% likely to be exploited because of the volatility in prices when leveraging flash loans.\nOracles like Chainlink, which are decentralized in nature, are significantly harder to break since the attacker would have to manipulate 50% +1 of nodes on a price feed.\nDecentralized exchanges like Uniswap have created their own \u201coracle\u201d functionality using time-weighted averages of prices (called TWAP) so they are resistant against flash loan attacks. However, the downside is that they are less accurate and are ergo considered a lagging indicator of price values. \nHow to prevent Price Oracle Manipulation Attacks?\n1. Choose the oracle carefully\nIt's important to know the strengths and weaknesses of different oracle designs, especially how they fit with your specific protocol needs.\nWhich data feeds are being aggregated by the oracle? \nIs this data being fetched from centralized exchanges, decentralized ones, or both?\nWhich statistical method is being used to aggregate this data into a single output? \nHow does the oracle work out dispute mechanisms in case there\u2019s discrepancies between the nodes? \nAll these questions fit critically into the oracle architecture and must be taken seriously when choosing the right oracle for a protocol. Using a liquidity pool as your oracle guarantees almost 100% that your protocol will get rekt by a flash loan attack, especially when leveraging low liquidity tokens which are easier to manipulate than those with a larger market cap.\n2. Have backup systems\nMany DeFi projects use a dual oracle system that leverages both (eg. \nChainlink Price Feeds\n) and an on-chain oracle (eg. \nUniswap V3 TWAP oracles\n). This system can switch to another oracle if the first one isn't working properly (like in the case that the data is wrong).\n3. Use decentralized oracles over centralized ones\nWhile a centralized oracle can be efficient, the drawbacks are usually bigger than the benefits. Relying on a single entity makes the oracle vulnerable if that specific entity goes offline or is manipulated. Additionally, users have to trust that the centralized party is providing accurate, unbiased data. This centralization also reduces resilience and censorship resistance.\nA decentralized oracle service that uses many sources is not completely safe from manipulation, but it's usually too costly to be a problem. Some downsides to decentralized oracles are the additional resources and coordination power needed to operate at scale and reach consensus across multiple independent sources. \nEven so, we recommend using decentralized oracles as they are harder to manipulate.\nSome examples of decentralized oracles are \nChainlink\n, \nAPI3\n, and \nSynthetix\n. Examples of centralized oracles are Coinbase and Kraken who expose the price data from their centralized exchange\u2019s order books.\n4. Constantly check the oracle\u2019s performance and take protective steps if needed\nDon't always trust that the data from an oracle is correct. Instead, check the data regularly. For example, you could write a script that compares the prices from an oracle to other sources and looks for big differences.\nIf you don't have a backup system, you should have ways to limit the effects of oracle manipulations. One way could be to pause a protocol\u2019s smart contracts if the oracle data source (or the oracle itself) is suspicious.\n5. Get an audit\nAlthough audits are not the cure to hacks, both \nprivate and competitive audits\n can significantly decrease the chance of an oracle manipulation attack occurring to your protocol. \nIf this is of interest to you, make sure to reach out to \nCyfrin for smart contract audit \nand get an estimate for your codebase.\nConclusion\nOracle manipulation attacks are a significant threat to the DeFi space today.\nWhile the Solidity code of the smart contracts operates as expected, \nthe vulnerability lies in the reliance on oracles as a source of truth.\nBy understanding their occurrence and mechanisms, protective measures can be developed to secure DeFi protocols in the future.\nIf you are concerned about whether your codebase is vulnerable to Oracle Manipulation Attacks, \ndon't hesitate to reach out here for an audit\n. \nAlternatively, \ncheck out the ultimate smart contract development learning platform\n to upskill your smart contract security skills!\n\u200d"
    }
}